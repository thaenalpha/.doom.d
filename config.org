#+TITLE:    Doom Emacs configuration
#+author:   Nopanun Laochunhanun
#+DATE:     Fri Dec 10 15:38:47 2021
#+PROPERTY: header-args :results silent
#+SINCE:    v3.0.0-alpha
#+STARTUP:  content

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; For e.g. GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Nopanun Laochunhanun"
      user-mail-address "nopanun@pm.me")
#+end_src

* Table of Contents :TOC_3:noexport:
- [[#system][System]]
  - [[#emacs][Emacs]]
  - [[#multitasking][Multitasking]]
    - [[#split-windows][Split windows]]
  - [[#power][Power]]
    - [[#battery-usage][Battery usage]]
  - [[#trash][Trash]]
  - [[#troubleshoot][Troubleshoot]]
    - [[#inhibit-cl-warning][Inhibit cl warning]]
    - [[#github-remote-ssh-always-ask-for-passphrase][Github remote SSH always ask for passphrase]]
    - [[#why-is-emacsdoom-slow][Why is Emacs/Doom slow?]]
- [[#personalization][Personalization]]
  - [[#colors][Colors]]
    - [[#choose-your-mode][Choose your mode:]]
  - [[#themes][Themes]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#window--frame][Window & frame]]
  - [[#miscellaneous][Miscellaneous]]
- [[#keyboard-shortcuts][Keyboard Shortcuts]]
- [[#apps][Apps]]
- [[#time--language][Time & language]]
  - [[#date--time][Date & time]]
  - [[#typing][Typing]]
    - [[#dabbrev][Dabbrev]]
- [[#accessibility][Accessibility]]
  - [[#visual-effects][Visual effects]]
  - [[#text-cursor][Text cursor]]
- [[#privacy--security][Privacy & security]]
- [[#modules][Modules]]
  - [[#completion][Completion]]
    - [[#corfu][Corfu]]
    - [[#tabnine][Tabnine]]
    - [[#vertico][Vertico]]
  - [[#ui][UI]]
    - [[#deft][Deft]]
    - [[#doom-dashboard][doom-dashboard]]
    - [[#tab-workspaces-work-in-progress][Tab-Workspaces (work in progress)]]
    - [[#window-navigation][Window Navigation]]
    - [[#modus][modus]]
    - [[#treemacs][Treemacs]]
    - [[#fixmee][fixmee]]
  - [[#editor][Editor]]
    - [[#evil][Evil]]
    - [[#format][Format]]
  - [[#emacs-1][emacs]]
    - [[#dired][dired]]
  - [[#tools][Tools]]
    - [[#arrayify][Arrayify]]
    - [[#brief][Brief]]
    - [[#fzf][fzf]]
    - [[#magit-forge][magit +forge]]
    - [[#tree-sitter][Tree-sitter]]
  - [[#programming-language][Programming Language]]
    - [[#clojure][Clojure]]
    - [[#javascript][JavaScript]]
    - [[#web][Web]]
    - [[#org-mode][Org-mode]]
  - [[#email-email][Email :email:]]
    - [[#mu4e][mu4e]]
  - [[#apps-1][Apps]]
    - [[#edit-server][Edit-Server]]
    - [[#mastodon][Mastodon]]
    - [[#telega---full-featured-unofficial-client-for-telegram-platform-for-gnu-emacs][Telega - full featured unofficial client for Telegram platform for GNU Emacs.]]
  - [[#terminal][Terminal]]
    - [[#vterm][vterm]]
  - [[#configure][Configure]]
    - [[#default][default]]
- [[#local-configures][Local Configures]]
  - [[#directory-local-variables][Directory Local Variables]]
  - [[#safe-local-variables][safe-local-variables]]
  - [[#marking-the-root-of-a-project][Marking the root of a project]]

* System
#+begin_src emacs-lisp
;;
;;; System
#+end_src
** Emacs
#+begin_src emacs-lisp :noweb no-export
(setq <<split-windows>>
      truncate-string-ellipsis  "…")    ; Unicode ellispis are nicer than "...",
                                        ; and also save /precious/ space
(global-subword-mode 1)                 ; Iterate through CamelCase words
#+end_src
** Multitasking
*** Split windows
Automatically resize and arrange windows on your screen
#+name: split-windows
#+begin_src emacs-lisp :tangle no
window-combination-resize t ; take new window space from all other windows
#+end_src

When I split a window, show prompt for which buffer I want to see
#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src
** Power
*** Battery usage
#+begin_src emacs-lisp
(unless (equal "Battery status not available" (battery)) ; on laptops…
  (display-battery-mode 1)) ; it's nice to know how much power you have
#+end_src
** Trash
#+begin_src emacs-lisp
(setq-default delete-by-moving-to-trash t) ; Delete files to trash
#+end_src
** Troubleshoot
*** Inhibit cl warning
#+begin_src emacs-lisp
(setq byte-compile-warnings '(not cl-functions))
#+end_src
*** Github remote SSH always ask for passphrase
Troubleshoot by load Key-chain Environment Variables
[[https://github.com/tarsius/keychain-environment][tarsius/keychain-environment: Loads keychain environment variables into emacs]]
Captured On: [2021-11-12 Fri 23:05]

#+begin_src emacs-lisp
(use-package keychain-environment
  :defer t
  :init (keychain-refresh-environment))
#+end_src

*** Why is Emacs/Doom slow?
Some advice from @hlissner on [[https://discourse.doomemacs.org/t/why-is-emacs-doom-slow/83/3][Why is Emacs/Doom slow? - Discussion / Doom Emacs Discourse]]
Captured On: [2021-12-11 Sat 14:35]

1. Disable idle code-completion (i.e. completion-as-you-type).
   #+begin_src emacs-lisp
(setq company-idle-delay nil)
   #+end_src
   #+begin_quote
   Add the above sexp to make code completion manual (on =C-SPC=, by default)
   That way, you only need to suffer that slowness once, when it is needed.
   #+end_quote
2. [[file:init.org::*Disable some of Doom’s slowest modules.][Disable some of Doom’s slowest modules.]]
3. Turn off line numbers:
   #+name: my-line-numbers-setting
   #+begin_src emacs-lisp :tangle no
display-line-numbers-type  nil
   #+end_src
   #+begin_quote
   It’s known to slow down scrolling, in particular. Line numbers are pretty slow
   all around. The performance boost of disabling them outweighs the utility of
   always keeping them on.
   #+end_quote
4. Turn off the “prettification” of org-mode, by disabling the =+pretty=
   flag on the =:lang org= module (if you have it on).

   You can go to an extreme by disabling more of its eye-candy:
   #+begin_src emacs-lisp :tangle no
(after! org
  (setq org-fontify-quote-and-verse-blocks nil
        org-fontify-whole-heading-line nil
        org-hide-leading-stars nil
        org-startup-indented nil))
   #+end_src
5. Change your font(s). Emacs struggles to display some unicode characters
   with certain fonts. It sometimes struggles to display multiple fonts at
   once – as is the case if your primary font doesn’t support certain symbols
   (Emacs will fall back to another font to try to display them, which
   appears to be more expensive on some systems than others – or with some
   fonts, more than others)
6. Replace the =:ui modeline= module with =:ui (modeline +light)=. The
   doom-modeline can be unpredictably slow in some edge cases. The =+light=
   variant is a work-in-progress replacement aiming to provide a lighter
   (albeit less featureful) mode line.
7. Check out “[[https://discourse.doomemacs.org/t/119][Common configuration mistakes]]”.


* Personalization
UI stuff

#+begin_src emacs-lisp :noweb no-export
;;
;;; UI

(setq <<my-line-numbers-setting>>
      <<my-treemacs-settings>>
      <<my-fonts-settings>>
      <<my-frame-settings>>)

<<my-theme-script>>
#+end_src

** Colors
Look at the options and choose your [[mode][mode]]
#+name:     my-theme-modes
#+begin_src emacs-lisp :tangle no
(default    'doom-one)
(light      'doom-one-light)
(dark       'doom-dracula)
(custom     'doom-vibrant)
#+end_src

: default, light, dark, custom

or

#+name:     auto-dark-mode
#+begin_src emacs-lisp :tangle no
auto       'auto
#+end_src

: auto

#+name: auto-mode-settings
#+begin_src emacs-lisp :tangle no
(light-theme-begin 6)   ; Hour to turn on  `light' theme
(light-theme-end   17)  ; Hour to turn off `light' theme
#+end_src

~auto~ mode is the automatic theme switching. If ~auto~ mode was
set, ~doom-theme~ will be set to the ~light~ or ~dark~ theme according to
the hour in the current time, ~light-theme-begin~ and ~light-theme-end~.

*** Choose your mode:
#+name: mode
#+begin_src emacs-lisp :tangle no
auto
#+end_src

** Themes
#+name: my-theme-script
#+begin_src emacs-lisp :noweb no-export :tangle no
(let ((my-doom-color '<<mode>>))
  (eval                           ; theme varies to the value of `my-doom-color'
   `(let ((<<auto-dark-mode>>)
          <<my-theme-modes>>)
      (if (eq ,my-doom-color 'auto)
          (run-with-timer
           0 3600                       ; check for every hour
           (defun synchronize-theme (light dark)
             "Sets the theme according to the hour in the current time.
If the hour is (both inclusive) in `light-theme-hours' then
`light' theme is loaded, otherwise `dark' theme is loaded."
             (let* ((hour (string-to-number
                           (substring (current-time-string) 11 13)))
                    <<auto-mode-settings>>
                    (light-theme-hours (number-sequence
                                        light-theme-begin light-theme-end))
                    (now (if (member hour light-theme-hours) light dark)))
               (unless (equal now doom-theme)
                 (setq doom-theme now) (doom-init-theme-h)))) light dark)
        ;; Specific color mode
        (setq doom-theme ,my-doom-color) (doom-init-theme-h)))))
#+end_src

** Fonts
+ JetBrains Mono
+ Noto Serif
+ [[https://bboxtype.com/typefaces/FiraGO/][FiraGO]] Global Language Extension of the Open Font Family Fira Sans
  Arabic · Devanagari · Georgian · Hebrew · Thai
#+name: my-fonts-settings
#+begin_src emacs-lisp :tangle no
doom-font                  (font-spec :family "JetBrains Mono"
                                      :size 12 :weight 'light)
doom-variable-pitch-font   (font-spec :family "Noto Serif"     :size 13)
vertico-posframe-font      (font-spec :family "JetBrains Mono" :size 15)
doom-unicode-font          (font-spec :family "FiraGO" :weight 'Book)
doom-serif-font            doom-variable-pitch-font
#+end_src
** Modeline
I want to use [[https://github.com/TeMPOraL/nyan-mode][Nyan Mode]] with doom-modeline and I want to add =+nyan= flag to
the modeline module. What I need to do is hack the =ui/modeline/packages.el=
file locates in .emacs.d/modules directory to add the nyan-mode package, add
=+nyan.el= for config file and add some code into the module. (I've done this
in my doom-emacs fork, and I'm attempting to introduce it to upstream soon)

** Window & frame
#+name: my-frame-settings
#+begin_src emacs-lisp :tangle no
default-frame-alist        (append default-frame-alist
                                   '((height . 48)
                                     (width  . 160)
                                     (inhibit-double-buffering . t)))
#+end_src
** Miscellaneous
Extra colors for Info-mode
#+begin_src emacs-lisp
(use-package! info-colors
  :hook (Info-selection . info-colors-fontify-node))
#+end_src

* Keyboard Shortcuts :keybinds:
For the speed of expressions
#+begin_src emacs-lisp :noweb no-export
;;
;;; keybinds

(map! :n  "g+"    #'evil-numbers/inc-at-pt
      :v  "g+"    #'evil-numbers/inc-at-pt-incremental
      :nv "g="    #'er/expand-region
      :gi "C-="   #'er/expand-region
      :n  "C-0"   #'doom/reset-font-size
      :n  "C-+"   #'text-scale-increase
      :n  "M-C-+" #'doom/increase-font-size
      :n  "C-SPC" #'just-one-space
      <<cape-bindings>>
      <<dashboard>>
      <<:ui hydra>>
      (:when (featurep! :config default)
       <<default>>)
      <<vterm-kbd>>
      :desc "Load doom-theme on the fly" "<f5>" (cmd! (doom-init-theme-h))
      (:prefix "C-x"
       :when (featurep! :ui popup)
       :desc "Open this buffer in a popup" "j" #'+popup/buffer)
      :map mode-specific-map            ; C-c
      (:when (featurep! :tools eval)
       :desc "Evaluate line/region"        "e" #'+eval/line-or-region
       :desc "Evaluate & replace region"   "E" #'+eval/region-and-replace)
      (:when (featurep! :tools fzf)
       :desc "Fuzzy find file in project"  "t" #'fzf-projectile))
#+end_src

* Apps
* Time & language
#+begin_src emacs-lisp
;;
;;; Time & language
#+end_src
** Date & time
#+begin_src emacs-lisp
(display-time-mode 1)                   ; Enable time in the mode-line
#+end_src
** Typing :completion:preferences:
*** Dabbrev
Swap =M-/= and =C-M-/=
#+begin_src emacs-lisp
(use-package dabbrev
  :bind (("M-/" . dabbrev-completion)   ; Swap M-/ and C-M-/
         ("C-M-/" . dabbrev-expand)))
#+end_src

* Accessibility
#+begin_src emacs-lisp
;;
;;; Accessibility
#+end_src
** Visual effects
#+name: visual-effects-settings
#+begin_src emacs-lisp :tangle no
(setq scroll-margin 2)                  ; It's nice to maintain a little margin
;;scroll-preserve-screen-position 'always ; Don't have `point' jump around
#+end_src
** Text cursor
#+name: my-cursor-settings
#+begin_src emacs-lisp
(setq-default x-stretch-cursor t)       ; Stretch cursor to the glyph width
#+end_src
* Privacy & security
#+begin_src emacs-lisp
;;
;;; Security

(setq password-cache-expiry nil)        ; I can trust my computers … can't I?
#+end_src
* Modules
#+begin_src emacs-lisp
;;
;;; Modules
#+end_src
** Completion :completion:
*** Corfu
*Configuration*
- Set bindings (evil)
  #+name: cape-bindings
  #+begin_src emacs-lisp :tangle no
;; evil Omni-completion, Bind dedicated completion commands
(:when (and (featurep! :editor evil)
            (featurep! :completion corfu))
 :i "C-@"   (cmds! (not (minibufferp)) #'completion-at-point)
 :i "C-SPC" (cmds! (not (minibufferp)) #'completion-at-point)
 :prefix "C-x"
 :i "C-p"   #'completion-at-point  ; capf
 :i "C-l"   #'cape-line
 :i "C-k"   #'+cape/dict-or-keywords
 :i "C-a"   #'cape-abbrev
 :i "s"     #'cape-ispell
 (:unless (featurep! :completion company)
  :i "C-s"  #'+cape/yasnippet)
 :i "C-d"   #'cape-dabbrev
 :i "d"     #'dabbrev-completion
 :i "C-f"   #'cape-file
 :i "C-'"   #'cape-symbol
 :i "C-]"   #'complete-tag         ; etags
 :i "C-\\"  #'cape-tex
 :i "&"     #'cape-sgml
 :i "C-r"   #'cape-rfc1345)
  #+end_src

- Additional movement commands
  #+name: additional-move-cmds
  #+begin_src emacs-lisp :tangle no
(defun corfu-beginning-of-prompt ()
  "Move to beginning of completion input."
  (interactive)
  (corfu--goto -1)
  (goto-char (car completion-in-region--data)))

(defun corfu-end-of-prompt ()
  "Move to end of completion input."
  (interactive)
  (corfu--goto -1)
  (goto-char (cadr completion-in-region--data)))
  #+end_src

- Transfer to the minibuffer
  #+name: to-minibuffer
  #+begin_src emacs-lisp :tangle no
(defun corfu-move-to-minibuffer ()
  (interactive)
  (let ((completion-extra-properties corfu--extra)
        completion-cycle-threshold completion-cycling)
    (apply #'consult-completion-in-region completion-in-region--data)))
  #+end_src

- Auto-commit
  #+name: auto-commit
  #+begin_src org :tangle no
Corfu allows you to specify a ~corfu-commit-predicate~, which you can use to
instruct corfu whether to auto-commit completion candidates. It's run after
every new key event. In the example below, the candidate is auto-committed when
"." is entered, but not after a space (e.g. for orderless regexps), on any key
aside from space if only one candidate exists, and when the 1st candidate is an
exact match for what you have typed in the buffer on a wide variety of key
presses
  #+end_src
  #+name: auto-commit.el
  #+begin_src emacs-lisp :tangle no
(defun my/corfu-commit-predicate ()
  "Auto-commit candidates if:
1. A `.' is typed, except after a SPACE.
2. A selection was made, aside from entering SPACE.
3. Just one candidate exists, and we continue to non-symbol info.
4. The 1st match is exact."
  (cond
   ((seq-contains-p (this-command-keys-vector) ?.)
    (or (string-empty-p (car corfu--input))
        (not (string= (substring (car corfu--input) -1) " "))))

   ((/= corfu--index corfu--preselect) ; a selection was made
    (not (seq-contains-p (this-command-keys-vector) ? )))

   ((eq corfu--total 1) ;just one candidate
    (seq-intersection (this-command-keys-vector) [?: ?, ?\) ?\] ?\( ? ]))

   ((and corfu--input ; exact 1st match
         (string-equal (substring (car corfu--input) corfu--base)
                       (car corfu--candidates)))
    (seq-intersection (this-command-keys-vector) [?: ?. ?, ?\) ?\] ?\" ?' ? ]))))

(setq corfu-commit-predicate #'my/corfu-commit-predicate)
  #+end_src

**** README.org
#+begin_src org :tangle modules/completion/corfu/README.org :noweb no-export :mkdirp yes
,#+TITLE:   completion/corfu
,#+DATE:    December 6, 2021
,#+SINCE:   v3.0.0-alpha
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
  - [[#hacks][Hacks]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
- [[#configuration][Configuration]]
- [[#troubleshooting][Troubleshooting]]

,* Description
[[https://github.com/minad/corfu][GitHub - minad/corfu: corfu.el - Completion Overlay Region FUnction]]
in the form of doom module by [[https://git.sr.ht/~gagbo][@Gerry_Agbobada]]. The primary packages are:

+ Corfu, which provides a completion overlay region function
+ Cape, which provides a bunch of Completion At Point Extensions
+ kind-icon, which provides an colorful icon/text prefix based on :company-kind
+ Company, which provides completion backends to be converted to Capf

,** Maintainers
+ [[https://git.sr.ht/~gagbo][@Gerry_Agbobada]] (Author)
+ [[https://github.com/thaenalpha][@thaenalpha]]

,** Module Flags
+ =+orderless= optionally use the [[https://github.com/oantolin/orderless][orderless]] completion style which provides
  better filtering methods by filters through candidates those match space-
  separated regular expressions.
+ =+tabnine= use Tabnine code completion for capf

,** Plugins
+ [[https://github.com/minad/corfu][corfu]]
+ [[https://github.com/minad/cape][cape]]
+ [[https://github.com/jdtsmith/kind-icon][kind-icon]]
+ [[https://github.com/oantolin/orderless][orderless]] (=+orderless=)
+ [[https://github.com/company-mode/company-mode][company-mode]]
+ <<company-tabnine>>

,** Hacks
# A list of internal modifications to included packages; omit if unneeded

,* Prerequisites
This module has no prerequisites.

,* Features
,** TAB-and-Go completion
Pressing TAB moves to the next candidate and further input will then commit the
selection.

,** Code completion
By default, completion is triggered after a short idle period or with the
=C-SPC= key. While the popup is visible, the following keys are available:

| Keybind | Description                              |
|---------+------------------------------------------|
| =C-n=   | Go to next candidate                     |
| =C-p=   | Go to previous candidate                 |
| =C-j=   | (evil) Go to next candidate              |
| =C-k=   | (evil) Go to previous candidate          |
| =C-h=   | Display documentation (if available)     |
| =C-u=   | Move to previous page of candidates      |
| =C-d=   | Move to next page of candidates          |
| =C-SPC= | Complete common                          |
| =TAB=   | Complete common or select next candidate |
| =S-TAB= | Select previous candidate                |

,** Vim-esque omni-completion prefix (C-x)
In the spirit of Vim's omni-completion, the following insert mode keybinds are
available to evil users to access specific company backends:

| Keybind   | Description                       |
|-----------+-----------------------------------|
| =C-x C-]= | Complete etags                    |
| =C-x C-f= | Complete file path                |
| =C-x C-k= | Complete from dictionary/keyword  |
| =C-x C-l= | Complete full line                |
| =C-x C-p= | Invoke complete-at-point function |
| =C-x C-'= | Complete symbol at point          |
| =C-x C-s= | Complete snippet                  |
| =C-x s=   | Complete spelling suggestions     |
| =C-x C-d= | Complete Corfu dabbrev at point   |
| =C-x d=   | dabbrev-completion at point       |

,* Configuration

,#+begin_quote
Corfu is highly flexible and customizable via ~corfu-*~ customization variables.
For filtering I recommend to give Orderless completion a try, which is
different from the familiar prefix TAB completion. Corfu can be used with the
default completion styles, the use of Orderless is not a necessity. See also
the [[https://github.com/minad/corfu/wiki][Corfu Wiki]] for additional configuration tips. In particular the Lsp-mode
configuration is documented in the Wiki.
@minad (Author of Cape, Corfu, Vertico)
,#+end_quote
Here is an example configuration:

,** Optional customizations

,#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-cycle t)                ; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ; Enable auto completion
  (corfu-commit-predicate nil)   ; Do not commit selected candidates on next input
  (corfu-quit-at-boundary t)     ; Automatically quit at word boundary
  (corfu-quit-no-match t)        ; Automatically quit if there is no match
  (corfu-preview-current nil)    ; Disable current candidate preview
  (corfu-preselect-first nil)    ; Disable candidate preselection
  (corfu-echo-documentation nil) ; Disable documentation in the echo area
  (corfu-scroll-margin 5)        ; Use scroll margin)
,#+end_src

,** Enable Corfu only for certain modes.
This module enable ~corfu-global-mode~ by default. You may want to enable Corfu
only for certain modes.
,#+begin_src emacs-lisp
(use-package corfu
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))
,#+end_src

,** Completion style
Tune the global completion style settings to your liking!
This affects the minibuffer and non-lsp completion at point.
,#+begin_src emacs-lisp :noweb no-export
(use-package orderless
  :defer t
  :when (featurep! :completion corfu +orderless)
  :init
  <​<optional>​>
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '(<​<file-styles>​>)))
,#+end_src

The =+orderless= feature enable ~partial-completion~ for files to allow path
expansion by default. You may prefer to use ~initials~ instead.

,#+name: file-styles
,#+begin_src emacs-lisp :tangle no
(file (styles . (initials)))
,#+end_src

See ~+orderless-dispatch~ in the Consult wiki for an advanced Orderless style
dispatcher.

,#+name: optional
,#+begin_src emacs-lisp :tangle no
(setq orderless-style-dispatchers '(+orderless-dispatch)
      orderless-component-separator #'orderless-escapable-split-on-space)
,#+end_src

,** Auto-Commit

<<auto-commit>>

,#+begin_src emacs-lisp
<<auto-commit.el>>
,#+end_src

,** More additional
See also the [[https://github.com/minad/corfu/wiki][Corfu Wiki]] for additional configuration tips. For more general
documentation read the chapter about completion in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html][Emacs manual]]. If you want
to create your own Capfs, you can find documentation about completion in
the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html][Elisp manual]].

,* Troubleshooting
,** Auto trigger commands

If Corfu is not triggering completion with ~corfu-auto~ it can be the case that the command was not called with ~self-insert-command~ or one of the other commands registered in the list ~corfu-auto-commands~. You can fix this by adding the commands you are missing to the list.

,#+begin_src emacs-lisp
(add-to-list 'corfu-auto-commands 'some-special-insert-command)
,#+end_src
#+end_src
**** autoload.el
#+begin_src emacs-lisp :tangle modules/completion/corfu/autoload.el
;;; completion/company/autoload.el -*- lexical-binding: t; -*-

;;;###autoload
(defvar +completion-at-point-function-alist
  '((text-mode cape-dabbrev +cape/yasnippet cape-ispell)
    (prog-mode +cape/yasnippet)
    (conf-mode company-dabbrev-code +cape/yasnippet))
  "An alist matching modes to completion-at-point-functions. The capfs for any mode is
built from this.")

;;;###autodef
(defun set-completion-at-point-function! (modes &rest capfs)
  "Prepends CAPFS (in order) to `completion-at-point-functions' in MODES.

MODES should be one symbol or a list of them, representing major or minor modes.
This will overwrite capfs for MODES on consecutive uses.

If the car of CAPFS is nil, unset the capfs for MODES.

Examples:

  (set-completion-at-point-function! 'js2-mode
    'company-tide 'company-yasnippet)

  (set-completion-at-point-function! 'sh-mode
    '(company-shell :with +cape/yasnippet))

  (set-completion-at-point-function! '(c-mode c++-mode)
    '(:separate company-irony-c-headers company-irony))

  (set-completion-at-point-function! 'sh-mode nil)  ; unsets capfs for sh-mode"
  (declare (indent defun))
  (dolist (mode (doom-enlist modes))
    (if (null (car capfs))
        (setq +completion-at-point-function-alist
              (delq (assq mode +completion-at-point-function-alist)
                    +completion-at-point-function-alist))
      (setf (alist-get mode +completion-at-point-function-alist)
            capfs))))

;;;###autoload
(defun +cape/dict-or-keywords (&optional interactive)
  "`corfu-mode' completion combining `cape-dict' and `cape-keywords'.
If INTERACTIVE is nil the function acts like a capf."
  (interactive (list t))
  (if interactive
      (cape--interactive #'+cape/dict-or-keywords)
    (funcall (cape-super-capf #'cape-keyword #'cape-dict))))

;;;###autoload
(defun +cape/yasnippet (&optional interactive)
  "`corfu-mode' completion for `yasnippet'
If INTERACTIVE is nil the function acts like a capf."
  (interactive (list t))
  (if interactive
      (cape--interactive #'+cape/yasnippet)
    (funcall (cape-company-to-capf #'company-yasnippet))))
#+end_src
**** config.el
#+begin_src emacs-lisp :tangle modules/completion/corfu/config.el :noweb no-export
;;; completion/corfu/config.el -*- lexical-binding: t; -*-

;; Reset lsp-completion provider and optionally configure the cape-capf-buster.
(add-hook! 'doom-init-modules-hook
  (after! lsp-mode
    (setq lsp-completion-provider :none)
    (setq-local completion-at-point-functions
                (list (cape-capf-buster #'lsp-completion-at-point)))))

;; Pad before lsp modeline error info
(add-hook! 'lsp-mode-hook
  (setf (caadr (assq 'global-mode-string mode-line-misc-info)) " "))

;; Set orderless filtering for LSP-mode completions
(add-hook! 'lsp-completion-mode-hook
  (setf (alist-get 'lsp-capf completion-category-defaults)
        '((styles . (orderless)))))

;; Fallback cleanly to consult in TUI
(setq-default completion-in-region-function #'consult-completion-in-region)

(use-package! corfu
  :commands corfu-complete
  :hook (doom-first-input . corfu-global-mode)
  :bind (:map corfu-map
         ("TAB"                          . corfu-next)
         ([tab]                          . corfu-next)
         ("S-TAB"                        . corfu-previous)
         ([backtab]                      . corfu-previous)
         ([remap move-beginning-of-line] . corfu-beginning-of-prompt)
         ([remap move-end-of-line]       . corfu-end-of-prompt)
         ("M-m"                          . corfu-move-to-minibuffer)
         ([return]                       . corfu-insert))
  :init
  (setq corfu-cycle t              ; Enable cycling for `corfu-next/previous'
        corfu-auto  t              ; Enable auto completion
        corfu-quit-no-match t      ; Automatically quit if there is no match
        corfu-preselect-first nil) ; Disable candidate preselection

  <<additional-move-cmds>>

  <<to-minibuffer>>

  :config
  (when (and (featurep 'evil) (featurep! :config default +bindings))
    ;; https://github.com/minad/corfu/issues/12#issuecomment-869037519
    (advice-add #'corfu--setup :after #'evil-normalize-keymaps)
    (advice-add #'corfu--teardown :after #'evil-normalize-keymaps)
    (evil-make-intercept-map corfu-map)
    ;; Don't persist corfu popups when switching back to normal mode.
    (add-hook! 'evil-normal-state-entry-hook
      (when corfu--candidates (corfu-quit)))

    (map! (:map corfu-map
           "C-n"    #'corfu-next
           "C-p"    #'corfu-previous
           "C-j"    #'corfu-next
           "C-k"    #'corfu-previous
           "C-h"    #'corfu-show-documentation
           "C-u"    #'corfu-scroll-down
           "C-d"    #'corfu-scroll-up
           "C-v"    #'corfu-scroll-up
           "C-s"    #'corfu-move-to-minibuffer
           "C-`"    #'corfu-move-to-minibuffer
           "C-x j"  #'corfu-move-to-minibuffer
           "C-S-s"  #'completion-at-point)))

  <<auto-commit.el>>)

;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package! orderless
  :defer t
  :when (featurep! +orderless)
  :init
  ;; Optionally configure the first word as flex filtered.
  (add-hook 'orderless-style-dispatchers
            (defun my/orderless-dispatch-flex-first (_pattern index _total)
              (and (eq index 0) 'orderless-flex)) nil 'local)
  (setq completion-styles '(orderless partial-completion)
        completion-category-defaults nil
        completion-category-overrides '((file
                                         (styles . (partial-completion))))))

(use-package! kind-icon
  :after corfu
  :custom
  ;; to compute blended backgrounds correctly
  (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package! cape
  :defer t
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'completion-at-point-functions #'+cape/yasnippet)
  <<tabnine>>)

;; TAB CYCLE if there are only a few candidates, otherwise show menu
(setq completion-cycle-threshold 3)
(when EMACS28+    ; Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  (setq read-extended-command-predicate #'command-completion-default-include-p))

;; Enable indentation+completion using the TAB key.
;; `completion-at-point' is often bound to M-TAB.
(setq tab-always-indent 'complete)

;; Dirty hack to get c completion running
;; Discussion in https://github.com/minad/corfu/issues/34
(when (equal tab-always-indent 'complete)
  (map! :map c-mode-base-map
        :i [remap c-indent-line-or-region] #'completion-at-point))
#+end_src
**** packages.el
#+begin_src emacs-lisp :tangle modules/completion/corfu/packages.el
;; -*- no-byte-compile: t; -*-
;;; completion/corfu/packages.el

(package! corfu)
(when (featurep! +orderless)
  (package! orderless))
(package! kind-icon)
(package! cape :recipe (:host github :repo "minad/cape" :branch "main"))
(unless (featurep! :completion company) (package! company))
#+end_src

*** Tabnine
+ [[https://github.com/tommyX12/company-tabnine][company-tabnine]] (=+tabnine=)

**** With Company
This configuration come as a flag but it isn't bundled with company module.
I put the flag for my convenient to enable/disable package.

Install package in =packages.el=. Enable by add flag to =:completion company=
***** Configuration code
#+begin_src emacs-lisp
;;; :completion company +tabnine
(when (featurep! :completion company +tabnine)
  (add-to-list 'company-backends #'company-tabnine)
  (after! company
    (setq +lsp-company-backends
          '(company-tabnine :separate company-capf company-yasnippet))
    (setq company-show-numbers t)
    (setq company-idle-delay 0)))
#+end_src

**** With Corfu
This configuration come as a flag and is bundled with corfu module.
Enable by add =+tabnine= flag to =:completion corfu=
***** Tabnine part in Doom's Corfu module source code
+ tabnine/
  #+name: company-tabnine
  #+begin_src org :tangle no
[[https://github.com/tommyx12/company-tabnine][company-tabnine]] (=+tabnine=)
  #+end_src
  #+name: tabnine
  #+begin_src emacs-lisp :tangle no
(when (featurep! +tabnine)
  (add-to-list 'completion-at-point-functions
               (cape-company-to-capf #'company-tabnine)))
  #+end_src
  #+name: packages.el
  #+begin_src emacs-lisp :tangle modules/completion/corfu/packages.el
(when (featurep! +tabnine)
  (package! company-tabnine
    :recipe (:host github :repo "tommyX12/company-tabnine")))
  #+end_src
*** Vertico
+ =+childframe=
  _Enable vertico-posframe extension_
  #+begin_src emacs-lisp :noweb no-export
;;; :completion vertico
(when (featurep! :completion vertico +childframe)
  (require 'vertico-posframe)
  (vertico-posframe-mode 1)
  (setq vertico-posframe-border-width 10
        vertico-posframe-parameters
        '((min-width . 90)
          <<show-fringe>>)))
  #+end_src

  _show fringe to vertico-posframe_
  #+name: show-fringe
  #+begin_src emacs-lisp :tangle no
(left-fringe  . 8)
(right-fringe . 8)
  #+end_src
** UI :ui:
*** Deft
**** Configuration
Specify the directory in which your notes are stored:

#+begin_src emacs-lisp
;;; ui: deft
(setq deft-directory "~/notes")
#+end_src
*** doom-dashboard
- *Dashboard Quick Actions*
  The config idea is come from Tecosaur's Emacs configuration.
  #+begin_quote
  When using the dashboard, there are often some actions I will take. As the
  dashboard is its own major mode, there is no need to suffer the tyranny of
  unnecessary keystrokes — we can simply bind common actions to a single key!
  #+end_quote
  #+name: dashboard
  #+begin_src emacs-lisp :tangle no
(:when (featurep! :ui doom-dashboard)
 (:map doom-leader-open-map
  "0"       #'+doom-dashboard/open)
 :map +doom-dashboard-mode-map
 :ne "h"    #'+treemacs/toggle
 :ne "l"    #'push-button
 :ne "u"    #'doom/quickload-session
 :ne "a"    #'org-agenda
 :ne "f"    #'find-file
 :ne "e"    #'eww
 :ne "r"    #'consult-recent-file
 :ne "p"    #'projectile-switch-project
 :ne "P"    #'doom/open-private-config
 :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
 :ne "." (defun find-dotfile () (interactive) (doom-project-find-file "~/.config"))
 :ne "b"    #'consult-buffer
 :ne "q"    #'save-buffers-kill-terminal
 :ne "v"    #'+vterm/here
 :ne "t"    #'telega
 :ne "T"    #'=twitter
 :ne "m"    #'mu4e
 :ne "n"    #'+default/find-in-notes
 :ne "d"    #'+workspace/close-window-or-workspace
 :ne "x"    #'org-capture)
  #+end_src

*** Tab-Workspaces (work in progress) :ui:tab_workspaces:
**** README.org
#+begin_src org :tangle modules/ui/tab-workspaces/README.org :mkdirp yes
,#+TITLE:   ui/tab-workspaces
,#+DATE:    November 15, 2020
,#+SINCE:   3.0
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
  - [[#hacks][Hacks]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
- [[#configuration][Configuration]]
- [[#troubleshooting][Troubleshooting]]

,* Description

Provide persistent workspaces using Emacs 27+ tab-bar feature

,** Maintainers
+ @gagbo (Author)

,** Module Flags
This module provides no flags.

,** Plugins
+ [[https://github.com/alphapapa/burly.el][burly.el]]
+ [[https://github.com/alphapapa/bufler.el][bufler.el]]

,** Hacks
The =bufler-tabs-mode= is very carefully avoided, because it uses tabs in a way
that is not compatible with this module's goal (changing tabs should change your
window configuration entirely)

,* Prerequisites
This module has no prerequisites.

,* Features
# An in-depth list of features, how to use them, and their dependencies.

A workspace is a group of buffers sharing the same bufler-workspace (which is
the =bufler-workspace-path= buffer-local variable).

Those workspaces are shown in tabs, whose name match the
=bufler-workspace-path=

,* Configuration
# How to configure this module, including common problems and how to address them.

,* Troubleshooting
# Common issues and their solution, or places to look for help.
#+end_src
**** bindings.el
#+begin_src emacs-lisp :tangle modules/ui/tab-workspaces/bindings.el
(map!  :n "C-t"   #'+workspace/new
       :n "C-S-t" #'+workspace/display
       :g "M-1"   #'+workspace/switch-to-0
       :g "M-2"   #'+workspace/switch-to-1
       :g "M-3"   #'+workspace/switch-to-2
       :g "M-4"   #'+workspace/switch-to-3
       :g "M-5"   #'+workspace/switch-to-4
       :g "M-6"   #'+workspace/switch-to-5
       :g "M-7"   #'+workspace/switch-to-6
       :g "M-8"   #'+workspace/switch-to-7
       :g "M-9"   #'+workspace/switch-to-8
       :g "M-0"   #'+workspace/switch-to-final
       (:when IS-MAC
        :g "s-t"   #'+workspace/new
        :g "s-T"   #'+workspace/display
        :n "s-1"   #'+workspace/switch-to-0
        :n "s-2"   #'+workspace/switch-to-1
        :n "s-3"   #'+workspace/switch-to-2
        :n "s-4"   #'+workspace/switch-to-3
        :n "s-5"   #'+workspace/switch-to-4
        :n "s-6"   #'+workspace/switch-to-5
        :n "s-7"   #'+workspace/switch-to-6
        :n "s-8"   #'+workspace/switch-to-7
        :n "s-9"   #'+workspace/switch-to-8
        :n "s-0"   #'+workspace/switch-to-final))

(map! :leader
      :desc "Switch workspace buffer" "," #'persp-switch-to-buffer
      :desc "Switch buffer"           "<" #'switch-to-buffer
      (:prefix-map ("TAB" . "workspace")
       :desc "Delete this workspace"     "d"   #'+workspace/delete
       :desc "Switch workspace"          "g"   #'+workspace/switch-to
       :desc "Restore workspace"         "G"   #'+workspace/restore
       :desc "Load workspace from file"  "l"   #'+workspace/load
       :desc "New workspace"             "n"   #'+workspace/new
       :desc "Rename workspace"          "r"   #'+workspace/rename
       :desc "Restore last session"      "R"   #'+workspace/restore-last-session
       :desc "Save workspace to file"    "s"   #'+workspace/save
       :desc "Delete session"            "x"   #'+workspace/kill-session
       :desc "Display tab bar"           "TAB" #'+workspace/display
       :desc "Switch workspace"          "."   #'+workspace/switch-to
       :desc "Switch to last workspace"  "`"   #'+workspace/other
       :desc "Next workspace"            "]"   #'+workspace/switch-right
       :desc "Previous workspace"        "["   #'+workspace/switch-left
       :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
       :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
       :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
       :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
       :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
       :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
       :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
       :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
       :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
       :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final)

      (:prefix-map ("b" . "buffer")
       :desc "Switch workspace buffer" "b" #'bufler-switch-buffer
       :desc "Switch buffer"           "B" #'switch-to-buffer))
#+end_src
**** config.el
#+begin_src emacs-lisp :tangle modules/ui/tab-workspaces/config.el
;;; ui/tab-workspaces/config.el -*- lexical-binding: t; -*-

(load! "generic")
(load! "bindings")

(defvar +workspaces--bufler-path-prefix "Workspace: "
  "The prefix in front of the workspace name, in the inner representation of a bufler path.

This prefix is used to correctly set the workspace context in the various hooks here,
using `doom-workspaces--workspace-frame-set-a'.")

(defadvice! doom-workspaces--workspace-frame-set-a (orig-fn &rest args)
  "Set the workspace of current frame based on the given named workspace name"
  :around #'bufler-workspace-frame-set
  (apply orig-fn (list (list (concat +workspaces--bufler-path-prefix (caar args))))))

;; (defvar +workspaces-on-switch-project-behavior 'non-empty
;;   "Controls the behavior of workspaces when switching to a new project.

;; Can be one of the following:

;; t           Always create a new workspace for the project
;; 'non-empty  Only create a new workspace if the current one already has buffers
;;             associated with it.
;; nil         Never create a new workspace on project switch.")

(defvar +workspaces-switch-project-function #'doom-project-find-file
  "The function to run after `projectile-switch-project' or
`counsel-projectile-switch-project'. This function must take one argument: the
new project directory.")

;; We need to find the correct hook to change the bufler workspace
;; (which is frame-local and not tab-local) to the tab we are choosing.
(defun +workspaces-set-bufler-workspace-a (&rest _)
  "Advice to set the workspace of the frame on tab changes"
  (let ((tab-name (alist-get 'name (tab-bar--current-tab))))
    (if (eq tab-name +workspaces-main)
        (bufler-workspace-frame-set)
      (bufler-workspace-frame-set (list tab-name)))))

(advice-add #'tab-bar-select-tab :after #'+workspaces-set-bufler-workspace-a)

(defun +doom-tab-bar--tab-name-function ()
  "A Doom specific tab-bar-tab-name-function.
Unless the tab name has been specifically set through `tab-rename', return `+workspaces-main'.
Therefore this function only needs to return the default value."
  +workspaces-main)

(setq tab-bar-tab-name-function #'+doom-tab-bar--tab-name-function)

(when EMACS28+
  (setq tab-bar-format '(tab-bar-format-history
                         tab-bar-format-tabs
                         tab-bar-separator
                         tab-bar-format-add-tab
                         tab-bar-format-align-right
                         tab-bar-format-global)))

;; TODO: check that the switch-to-buffer action (when listing all buffers) correctly
;; goes through tabs first, before opening the buffer in the current tab ??

;; Add 'doom-switch-buffer-hook that calls `bufler-workspace-buffer-set
;; so that the buffers interactively opened are put in the workspace
;; The current workspace is `(frame-parameter nil 'bufler-workspace-path)`,
;; but this is actually also the tab name by convention now, and it is easier to fetch
(add-hook! '(doom-switch-buffer-hook server-visit-hook)
  (defun +workspaces-add-current-buffer-h ()
    "Add current buffer to focused workspace."
    (when (or (not (+workspace-current-name))
              (eq (+workspace-current-name) +workspaces-main))
      (+workspaces-switch-to-project-h))
    (bufler-workspace-buffer-name-workspace (+workspace-current-name))))

(defvar +workspaces--project-dir nil)
(defun +workspaces-set-project-action-fn ()
  "A `projectile-switch-project-action' that sets the project directory for
`+workspaces-switch-to-project-h'."
  (+workspaces-switch-to-project-h default-directory)
  (funcall +workspaces-switch-project-function (or +workspaces--project-dir default-directory)))

;; TODO: properly reuse "main" if it's empty/free
(defun +workspaces-switch-to-project-h (&optional dir)
  (unwind-protect
      (progn
        (when dir
          (setq +workspaces--project-dir dir))
        (let ((projectile-project-root)
              (tab-name (doom-project-name +workspaces--project-dir)))
          (if (string= tab-name "-")
              (+workspace/switch-to-or-create +workspaces-main)
            (+workspace/switch-to-or-create tab-name))))
    (setq +workspaces--project-dir nil)))

(setq projectile-switch-project-action #'+workspaces-set-project-action-fn)
;; (when (featurep! :completion ivy)
;;   (setq
;;    counsel-projectile-switch-project-action
;;    '(1 ("o" +workspaces-switch-to-project-h "open project in new workspace")
;;        ("O" counsel-projectile-switch-project-action "jump to a project buffer or file")
;;        ("f" counsel-projectile-switch-project-action-find-file "jump to a project file")
;;        ("d" counsel-projectile-switch-project-action-find-dir "jump to a project directory")
;;        ("D" counsel-projectile-switch-project-action-dired "open project in dired")
;;        ("b" counsel-projectile-switch-project-action-switch-to-buffer "jump to a project buffer")
;;        ("m" counsel-projectile-switch-project-action-find-file-manually "find file manually from project root")
;;        ("w" counsel-projectile-switch-project-action-save-all-buffers "save all project buffers")
;;        ("k" counsel-projectile-switch-project-action-kill-buffers "kill all project buffers")
;;        ("r" counsel-projectile-switch-project-action-remove-known-project "remove project from known projects")
;;        ("c" counsel-projectile-switch-project-action-compile "run project compilation command")
;;        ("C" counsel-projectile-switch-project-action-configure "run project configure command")
;;        ("e" counsel-projectile-switch-project-action-edit-dir-locals "edit project dir-locals")
;;        ("v" counsel-projectile-switch-project-action-vc "open project in vc-dir / magit / monky")
;;        ("s" (lambda (project)
;;               (let ((projectile-switch-project-action
;;                      (lambda () (call-interactively #'+ivy/project-search))))
;;                 (counsel-projectile-switch-project-by-name project))) "search project")
;;        ("xs" counsel-projectile-switch-project-action-run-shell "invoke shell from project root")
;;        ("xe" counsel-projectile-switch-project-action-run-eshell "invoke eshell from project root")
;;        ("xt" counsel-projectile-switch-project-action-run-term "invoke term from project root")
;;        ("X" counsel-projectile-switch-project-action-org-capture "org-capture into project"))))

(use-package burly
  :init
  ;; Add hook to fix https://github.com/alphapapa/burly.el/issues/21
  (add-hook 'after-init-hook #'bookmark-maybe-load-default-file)

  ;; Blacklist a few frame-parameters
  ;; Discussion : https://github.com/alphapapa/burly.el/issues/23
  (setq burly-frameset-filter-alist
        '((name . nil)
          (posframe-parent-buffer . :never)
          (posframe-buffer . :never)))

  ;; Custom code to blacklist childframes from being saved in burly
  ;; Discussion : https://github.com/alphapapa/burly.el/issues/23
  (defun doom--not-childframep (&optional frame)
    "Return t if FRAME is a childframe. If FRAME is `nil', call for current frame."
    (unless (frame-parameter frame 'parent-frame)
      t))

  (defvar doom-burly-frames-filter-predicate #'doom--not-childframep
    "A predicate function to call of frames when saving them")

  (defun doom--burly-bookmark-frames-a (name)
    "Bookmark the current frames as NAME. Override of `burly-bookmark-frames' to filter frames with `doom-burly-frames-save-predicate'."
    (interactive (let ((bookmark-names (cl-loop for bookmark in bookmark-alist
                                                for (_name . params) = bookmark
                                                when (equal #'burly-bookmark-handler (alist-get 'handler params))
                                                collect (car bookmark))))
                   (list (completing-read "Save Burly bookmark: " bookmark-names nil nil burly-bookmark-prefix))))

    (let ((record (list (cons 'url (burly-frames-url (cl-remove-if-not doom-burly-frames-filter-predicate (frame-list))))
                        (cons 'handler #'burly-bookmark-handler))))
      (bookmark-store name record nil)))

  (advice-add 'burly-bookmark-frames :override #'doom--burly-bookmark-frames-a))

(use-package bufler
  :hook ((after-init . bufler-workspace-mode)) ; Set the frame name to the workspace name
  :init
  (setq tab-bar-show 1)
  :config
  ;; disable tab-{bar,line}-mode in Company childframes
  (after! company-box
    (add-to-list 'company-box-frame-parameters '(tab-bar-lines . 0)))

  ;; Set the bufler grouping strategy
  (setf bufler-groups
        (bufler-defgroups
          ;; Grouping the named workspace first means that interactively
          ;; opening a special shared buffer like *Messages* will steal the
          ;; buffer from everyone else. Therefore all special-mode buffers are
          ;; handled first.

          (group
           ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
           (group-or "*Help/Info*"
                     (mode-match "*Help*" (rx bos "help-"))
                     (mode-match "*Info*" (rx bos "info-"))))

          ;; TODO: some special buffers should not fall into this category,
          ;; like compilation buffers or interpreter buffers
          (group
           ;; Subgroup collecting all special buffers (i.e. ones that are not
           ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
           ;; through to other groups, so they end up grouped with their project buffers).
           (group-and "*Special*"
                      (lambda (buffer)
                        (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                             buffer)
                                    (funcall (mode-match "Dired" (rx bos "dired"))
                                             buffer)
                                    (funcall (auto-file) buffer))
                          "*Special*")))

           ;; Subgroup collecting these "special special" buffers
           ;; separately for convenience.
           (group
            (name-match "**Special**"
                        (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))

           ;; TODO: Magit buffers should get to a project workspace before being put
           ;; in a magit catchall category
           (group
            ;; Subgroup collecting all other Magit buffers, grouped by directory.
            (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
            (auto-directory))

           ;; Subgroup for Helm buffers.
           (mode-match "*Helm*" (rx bos "helm-"))

           ;; Remaining special buffers are grouped automatically by mode.
           (auto-mode))

          ;; Subgroup collecting all named workspaces.
          (group
           (auto-workspace))

          ;; NOTE: Past this line, we enter fallback territory
          (group
           ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
           ;; `org-directory' is not yet defined).
           (dir (if (bound-and-true-p org-directory)
                    org-directory
                  "~/org"))
           (group
            ;; Subgroup collecting indirect Org buffers, grouping them by file.
            ;; This is very useful when used with `org-tree-to-indirect-buffer'.
            (auto-indirect)
            (auto-file))
           ;; Group remaining buffers by whether they're file backed, then by mode.
           (group-not "*special*" (auto-file))
           (auto-mode))
          (group
           ;; Subgroup collecting buffers in a projectile project.
           (auto-projectile))
          (group
           ;; Subgroup collecting buffers in a version-control project,
           ;; grouping them by directory.
           (auto-project))
          ;; All buffers under "~/.emacs.d" (or wherever it is).
          (dir user-emacs-directory)
          ;; All buffers under "~/.doom.d" (or wherever it is).
          (dir doom-private-dir)
          ;; Group remaining buffers by directory, then major mode.
          (auto-directory)
          (auto-mode))))
#+end_src
**** generic.el
#+begin_src emacs-lisp :tangle modules/ui/tab-workspaces/generic.el
;;; ui/tab-workspaces/generic.el -- Generic interface for workspaces -*- lexical-binding: t; -*-

(defvar +workspaces-main "main"
  "The name of the primary and initial workspace, which cannot be deleted.")

;; (defun +workspaces-switch-to-project-h (&optional dir)
;;   "Creates a workspace dedicated to a new project. If one already exists, switch
;; to it. If in the main workspace and it's empty, recycle that workspace, without
;; renaming it.

;; Afterwords, runs `+workspaces-switch-project-function'. By default, this prompts
;; the user to open a file in the new project.

;; This be hooked to `projectile-after-switch-project-hook'."
;;   (when dir
;;     (setq +workspaces--project-dir dir))
;;   ;; HACK Clear projectile-project-root, otherwise cached roots may interfere
;;   ;;      with project switch (see #3166)
;;   (let (projectile-project-root)
;;     (when +workspaces--project-dir
;;       (when projectile-before-switch-project-hook
;;         (with-temp-buffer
;;           ;; Load the project dir-local variables into the switch buffer, so the
;;           ;; action can make use of them
;;           (setq default-directory +workspaces--project-dir)
;;           (hack-dir-local-variables-non-file-buffer)
;;           (run-hooks 'projectile-before-switch-project-hook)))
;;       (unwind-protect
;;           (if (and (not (null +workspaces-on-switch-project-behavior))
;;                    (or (eq +workspaces-on-switch-project-behavior t)
;;                        (equal (alist-get 'name (tab-bar--current-tab)) +workspaces-main)))
;;               (let* ((project-name (doom-project-name +workspaces--project-dir)))
;;                 (+workspace/switch-to-or-create project-name)
;;                 (with-current-buffer (doom-fallback-buffer)
;;                   (setq default-directory +workspaces--project-dir)
;;                   (hack-dir-local-variables-non-file-buffer))
;;                 (unless current-prefix-arg
;;                   (funcall +workspaces-switch-project-function +workspaces--project-dir))
;;                 (+workspace-message
;;                  (format "Switched to '%s' in new workspace" project-name)
;;                  'success))
;;             (with-current-buffer (doom-fallback-buffer)
;;               (setq default-directory +workspaces--project-dir)
;;               (hack-dir-local-variables-non-file-buffer)
;;               (message "Switched to '%s'" (doom-project-name +workspaces--project-dir)))
;;             (with-demoted-errors "Workspace error: %s"
;;               (+workspace-rename (+workspace-current-name) (doom-project-name +workspaces--project-dir)))
;;             (unless current-prefix-arg
;;               (funcall +workspaces-switch-project-function +workspaces--project-dir)))
;;         (run-hooks 'projectile-after-switch-project-hook)
;;         (setq +workspaces--project-dir nil)))))

(defun +workspace--message-body (message &optional type)
  (concat "Workspaces"
          (propertize " | " 'face 'font-lock-comment-face)
          (propertize (format "%s" message)
                      'face (pcase type
                              ('error 'error)
                              ('warn 'warning)
                              ('success 'success)
                              ('info 'font-lock-comment-face)))))

(defun +workspace-message (message &optional type)
  "Show an 'elegant' message in the echo area next to a listing of workspaces."
  (message "%s" (+workspace--message-body message type)))

(defun +workspace-error (message &optional noerror)
  "Show an 'elegant' error in the echo area next to a listing of workspaces."
  (funcall (if noerror #'message #'error)
           "%s" (+workspace--message-body message 'error)))

;;; API from :ui workspaces readme

;;;; General functions
(defun +workspace-list ()
  ""
  (error "+workspace-list is unimplemented"))

(defun +workspace-list-names ()
  ""
  (error "+workspace-list-names is unimplemented"))

(defun +workspace-buffer-list (&optional ws-name)
  ""
  (error "+workspace-buffer-list is unimplemented"))

(defun +workspace-p (obj)
  ""
  (error "+workspace-buffer-list is unimplemented"))

(defun +workspace-exists-p (&optional ws-name)
  ""
  (error "+workspace-exists-p is unimplemented"))

;;;; Accessors
(defun +workspace-get (name &optional noerror)
  "Return the index of the tab-bar where workspace NAME lives."
  (tab-bar--tab-index-by-name name))

(defun +workspace/get ()
  ""
  (interactive)
  ;; TODO Use +workspace-list-names for the completing-read candidates
  (error "+workspace/get is unimplemented"))

(defun +workspace-current (&optional frame window)
  ""
  (error "+workspace-current is unimplemented"))

(defun +workspace-current-name ()
  "Get the name of the current workspace."
  (alist-get 'name (tab-bar--current-tab)))

;;;; Persistence
(defun +workspace-load (name)
  ""
  (error "+workspace-load is unimplemented"))

(defun +workspace/load ()
  "Load a previously saved workspace"
  (interactive)
  (error "+workspace/load is unimplemented"))

(defun +workspace/restore ()
  (interactive)
  (call-interactively #'burly-open-bookmark))

(defun +workspace-load-session (name)
  ""
  (error "+workspace-load-session is unimplemented"))

(defun +workspace/restore-last-session ()
  (interactive)
  (error "+workspace/restore-last-session is unimplemented"))

(defun +workspace-save (name)
  ""
  (error "+workspace-save is unimplemented"))

(defun +workspace/save ()
  "Save the workspace configuration for later loading"
  (interactive)
  (call-interactively #'burly-bookmark-windows))

(defun +workspace-save-session (name)
  ""
  (error "+workspace-save-session is unimplemented"))

;;;; Creation
(defalias #'+workspace-new #'+workspace-create)
(defun +workspace-create (name)
  "Create a workspace with name NAME."
  (+workspace/create-then-switch-to name)
  (tab-recent))

(defun +workspace/new ()
  (interactive)
  (+workspace/create-then-switch-to +workspaces-main))

;;;; Renaming
(defun +workspace-rename (name new-name)
  "Rename the current workspace named NAME to NEW-NAME. Returns old name on
success, nil otherwise."
  (error "+workspace-rename is unimplemented"))

(defun +workspace/rename ()
  (interactive)
  (error "+workspace/rename is unimplemented"))

;;;; Deleting
(defun +workspace-delete (name &optional inhibit-kill-p)
  ""
  (error "+workspace-delete is unimplemented"))

(defun +workspace/delete ()
  "Kill all buffers associated to the workspace, and remove the workspace"
  (interactive)
  ;; TODO: to implement this, we would need a bufler-remove-group-maybe-kill function,
  ;; and a bufler-buffer-list-by-workspace function (= bufler-workspace-buffers)
  (error "+workspace/delete is unimplemented"))

;;;; Switching
(defun +workspace-switch (name &optional auto-create-p)
  ""
  (error "+workspace-delete is unimplemented"))

(defun +workspace/switch-to-or-create (name)
  "Get or create a workspace with name NAME."
  (interactive
   (list
    (completing-read "Workspaces: "
                     (bufler-workspace-list-named-workspaces))))
  (if-let ((index (tab-bar--tab-index-by-name name)))
      (tab-select (1+ index))
    (+workspace/create-then-switch-to name)))

(defun +workspace/create-then-switch-to (name)
  "Create a workspace with name NAME."
  (interactive "sWorkspace Name: ")
  (tab-new)
  ;; FIXME: the "tab-new" did also switch tab, but the tab was nameless then
  ;; (and defaulted to +workspaces-main from tab-bar-tab-name-function)
  ;; so the tab switching hooks did not properly set the workspace for the frame
  (bufler-workspace-frame-set (list name))
  (tab-rename name))

;;;; Misc
(defun +workspace-protected-p (name)
  ""
  (error "+workspace-protected-p is unimplemented"))

;;; Extra interactive functions
(defun +workspace/other ()
  (interactive)
  (call-interactively #'tab-recent))

(defun +workspace/kill-session ()
  (interactive)
  (error "+workspace/kill-session is unimplemented"))

(defun +workspace/switch-to-buffer ()
  (interactive)
  (call-interactively #'bufler-switch-buffer))

(defun +workspace/display ()
  (interactive)
  (error "+workspace/display is unimplemented"))

;;; Switch to a given workspace
(defun +workspace/switch-right ()
  (interactive)
  (tab-next))

(defun +workspace/switch-left ()
  (interactive)
  (tab-previous))

(defun +workspace/switch-to ()
  (interactive)
  (call-interactively #'+workspace/switch-to-or-create))

(defun +workspace/switch-to-0 ()
  (interactive)
  (error "+workspace/switch-to-0 is unimplemented"))

(defun +workspace/switch-to-1 ()
  (interactive)
  (error "+workspace/switch-to-1 is unimplemented"))

(defun +workspace/switch-to-2 ()
  (interactive)
  (error "+workspace/switch-to-2 is unimplemented"))

(defun +workspace/switch-to-3 ()
  (interactive)
  (error "+workspace/switch-to-3 is unimplemented"))

(defun +workspace/switch-to-4 ()
  (interactive)
  (error "+workspace/switch-to-4 is unimplemented"))

(defun +workspace/switch-to-5 ()
  (interactive)
  (error "+workspace/switch-to-5 is unimplemented"))

(defun +workspace/switch-to-6 ()
  (interactive)
  (error "+workspace/switch-to-6 is unimplemented"))

(defun +workspace/switch-to-7 ()
  (interactive)
  (error "+workspace/switch-to-7 is unimplemented"))

(defun +workspace/switch-to-8 ()
  (interactive)
  (error "+workspace/switch-to-8 is unimplemented"))

(defun +workspace/switch-to-final ()
  (interactive)
  (error "+workspace/switch-to-final is unimplemented"))
#+end_src
**** packages.el
#+begin_src emacs-lisp :tangle modules/ui/tab-workspaces/packages.el
;; -*- no-byte-compile: t; -*-
;;; ui/tab-workspaces/packages.el

(package! bufler)
(package! burly)
#+end_src
*** Window Navigation :ui:hydra:
When =:ui hydra= is enabled, map keys to ~+hydra/window-nav/body~~ and ~+hydra/text-zoom/body~ to control text/window with single key commands.

#+name: :ui hydra
#+begin_src emacs-lisp :tangle no
(:when (featurep! :ui hydra)
 :desc "Interactive menu" "<menu>" #'+hydra/window-nav/body
 :leader     :desc "zoom"    "z"   #'+hydra/text-zoom/body
 :when (featurep! :completion vertico)
 [remap +hydra/window-nav/idomenu] #'consult-imenu)
#+end_src

*** modus :faces:theme:accessibility:
**** config.el
#+begin_src emacs-lisp :tangle modules/ui/modus/config.el :mkdirp yes
;;; ui/modus/config.el -*- lexical-binding: t; -*-

(use-package! modus-themes
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-mixed-fonts nil
        modus-themes-subtle-line-numbers nil
        modus-themes-intense-markup t
        modus-themes-deuteranopia t
        modus-themes-tabs-accented t
        modus-themes-variable-pitch-ui nil
        modus-themes-inhibit-reload t
        modus-themes-fringes nil ; {nil,'subtle,'intense}
        modus-themes-lang-checkers nil
        modus-themes-mode-line '(4 accented borderless)
        modus-themes-syntax nil
        modus-themes-hl-line '(underline accented)
        modus-themes-paren-match '(bold intense)
        modus-themes-links '(neutral-underline background)
        modus-themes-prompts '(intense bold)
        modus-themes-completions 'moderate ; {nil,'moderate,'opinionated}
        modus-themes-mail-citations nil ; {nil,'faint,'monochrome}
        modus-themes-region '(bg-only no-extend)
        modus-themes-diffs 'desaturated ; {nil,'desaturated,'bg-only}
        modus-themes-org-blocks 'gray-background ; or {nil,'tinted-background}
        modus-themes-org-agenda
        '((header-block . (variable-pitch 1.3))
          (header-date . (grayscale workaholic bold-today 1.1))
          (event . (accented varied))
          (scheduled . uniform)
          (habit . traffic-light))
        modus-themes-headings
        '((1 . (overline background variable-pitch 1.3))
          (2 . (rainbow overline 1.1))
          (t . (semibold)))
        doom-theme 'modus-operandi)
  :bind ("<f5>" . modus-themes-toggle))
#+end_src
**** packages.el
#+begin_src emacs-lisp :tangle modules/ui/modus/packages.el
;; -*- no-byte-compile: t; -*-
;;; ui/modus/packages.el

(package! modus-themes :built-in 'prefer)
#+end_src
*** Treemacs
Set theme, git-mode and width
#+name: my-treemacs-settings
#+begin_src emacs-lisp :tangle no
+treemacs-git-mode         'deferred
doom-themes-treemacs-theme 'doom-colors
#+end_src
*** fixmee :navigation:convenience:
**** README.org
#+begin_src org :tangle modules/ui/fixmee/README.org :mkdirp yes
,#+TITLE:   :ui fixmee
,#+DATE:    January 23, 2022
,#+SINCE:   v3.0.0-alpha
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
  - [[#urgency-of-fixme-notices][Urgency of "fixme" notices]]
  - [[#how-to-use-this-module][How to use this module]]
  - [[#key-bindings][Key Bindings]]
- [[#configuration][Configuration]]
- [[#troubleshooting][Troubleshooting]]

,* Description
This module tracks "fixme" notices in code comments, highlights
them, ranks them by urgency, and lets you navigate to them quickly.

,** Maintainers
+ [[https://github.com/thaenalpha][@thaenalpha]] (Author)

,** Module Flags
This module provides no flags.

,** Plugins
+ [[https://github.com/rolandwalker/fixmee][fixmee]]

,* Prerequisites
This module has no prerequisites.

,* Features
# An in-depth list of features, how to use them, and their dependencies.
,** Urgency of "fixme" notices
Is indicated by repetitions of the final character. For example,
one might write "FIXMEEEEEEEEE" for an important issue. The
~fixmee-goto-nextmost-urgent~ command will navigate to the longest notice first.

,** How to use this module
open some buffers and right-click on the word "fixme" in a comment

or press

=C-c f=

or

=M-x fixmee RET=

or

roll the mouse wheel when hovering over the text "fixm"
in the modeline.

or

execute ~fixmee-view-listing~ to navigate using
`next-error' conventions.


,** Key Bindings
| keybind     | description                                                |
|-------------+------------------------------------------------------------|
| =C-c f=     | ~fixmee-goto-nextmost-urgent~                              |
| =C-c F=     | ~fixmee-goto-prevmost-urgent~                              |
| =C-c v=     | ~fixmee-view-listing~                                      |
| =M-n=       | ~fixmee-goto-next-by-position~     only when the point is  |
| =M-p=       | ~fixmee-goto-previous-by-position~ inside a "fixme" notice |
| =C-u C-c f= | go to the nextmost urgent item in the current buffer       |
| =C-u C-c F= | go to the previousmost urgent item in the current buffer   |

,* Configuration
# How to configure this module, including common problems and how to address them.

,* Troubleshooting
# Common issues and their solution, or places to look for help.
#+end_src

**** config.el
#+begin_src emacs-lisp :tangle modules/ui/fixmee/config.el
;;; ui/fixmee/config.el -*- lexical-binding: t; -*-

(use-package! fixmee :defer t :config (global-fixmee-mode 1))
#+end_src

**** packages.el
[[file:packages.org::*Fixmee][Fixmee]]

** Editor :editor:
*** Evil :editor:evil:
#+name: evil-settings
#+begin_src emacs-lisp
;;; :editor evil
;; Focus new window after splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t
      ;; By default while in insert all changes are one big blob. Be more granular
      evil-want-fine-undo t)
#+end_src
**** Change evil surround pairs alist :evil:evil_surround:behavior:

When changing surrounding pairs like from [hello-world] to (hello-world), using
a keyboard shortcut like =cs[(=, it makes more sense to assume it's formatted
correctly. Instead it will add a space after the substitute.

However This is not the case for programming modes which can auto balance space
between pairs. Thus makes you need some extra work to get rid a space with a
little effort *except* _for Org-Mode source block_.

#+begin_src emacs-lisp
(add-hook! 'evil-org-mode-hook
  (setq-local evil-surround-pairs-alist
              '((40 "(" . ")")
                (91 "[" . "]")
                (123 "{" . "}")
                (41 "(" . ")")
                (93 "[" . "]")
                (125 "{" . "}")
                (35 "#{" . "}")
                (98 "(" . ")")
                (66 "{" . "}")
                (62 "<" . ">")
                (116 . evil-surround-read-tag)
                (60 . evil-surround-read-tag)
                (102 . evil-surround-function))))
#+end_src

*** Format
**** Disabling the LSP formatter
According to [[file:~/.emacs.d/modules/editor/format/README.org::*Disabling the LSP formatter][Disabling the LSP formatter]]
#+begin_quote
If you are in a buffer with ~lsp-mode~ enabled and a server that
supports =textDocument/formatting=, it will be used instead of
=format-all='s formatter.
#+end_quote

To disable this behavior on ts and js modes in favor of prettier:
#+begin_src emacs-lisp
;;; :editor format
(setq-hook! '(js-mode
              js2-mode
              rjsx-mode
              typescript-mode
              typescript-tsx-mode) +format-with-lsp nil)
#+end_src
** emacs
*** dired
#+name: diredc
#+begin_src emacs-lisp :tangle no
(:when )
#+end_src

** Tools :tools:
*** Arrayify
#+begin_src emacs-lisp
(use-package arrayify :load-path "lisp") ; ~/.doom.d/lisp/arrayify.el
#+end_src
*** Brief :tools:
**** README.org
#+begin_src org :tangle modules/tools/brief/README.org :mkdirp yes
,#+TITLE:   tools/brief
,#+DATE:    January 13, 2022
,#+SINCE:   v3.0.0-alpha
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
- [[#configuration][Configuration]]
- [[#troubleshooting][Troubleshooting]]

,* Description
Module for brief help

+ If possible, include a brief list of feature highlights here
+ Like code completion, syntax checking or available snippets
+ Include links to packages & external things where possible

,** Maintainers
+ [[https://github.com/thaenalpha][@thaenalpha]] (Author)

,** Module Flags
This module provides no flags.

,** Plugins
+ [[https://github.com/davep/cheat-sh.el][cheat-sh]]
+ [[https://github.com/thanhvg/emacs-howdoyou][howdoyou]]
+ [[https://github.com/kuanyui/tldr.el][tldr]]
+ [[https://github.com/astoff/devdocs.el][devdocs]]

,* Prerequisites
This module has no prerequisites.

,* Features
# An in-depth list of features, how to use them, and their dependencies.

,* Configuration
# How to configure this module, including common problems and how to address them.

,* Troubleshooting
#+end_src
**** config.el
#+begin_src emacs-lisp :tangle modules/tools/brief/config.el
;;; tools/brief/config.el -*- lexical-binding: t; -*-

(use-package! howdoyou
  :commands (howdoyou-query aj/howdoyou-hydra/body)
  :config
  (set-popup-rule! "*How Do You" :vslot 3 :size 0.5 :side 'top
    :select t :ttl nil :modeline t :autosave t :quit t)

  (add-hook! 'howdoyou-mode-hook
    (doom-mark-buffer-as-real-h) (persp-add-buffer (current-buffer))
    (solaire-mode +1) (mkdir "/tmp/howdoyou" t)
    (setq-local org-src-fontify-natively nil)
    (setq-local buffer-file-name
                "/tmp/howdoyou/latest.org")))

(map! :map search-map
      "M-a" #'howdoyou-query
      "M-s" #'cheat-sh
      "M-d" #'tldr
      "d"   (define-prefix-command 'devdocs))
#+end_src

**** packages.el
[[file:packages.org::*Brief][Brief]]

*** fzf :tools:
**** Description
Command-line fuzzy finder written in Go

***** Plugins
+ [[https://github.com/bling/fzf.el][fzf]]

**** config.el
#+begin_src emacs-lisp :tangle modules/tools/fzf/config.el :mkdirp yes
  ;;; tools/fzf/config.el -*- lexical-binding: t; -*-

(after! evil
  (evil-define-key 'insert fzf-mode-map (kbd "ESC") #'term-kill-subjob))

(define-minor-mode fzf-mode
  "Minor mode for the FZF buffer"
  :init-value nil
  :lighter " FZF"
  :keymap '(("C-c" . term-kill-subjob)))

(defadvice! doom-fzf--override-start-args-a (original-fn &rest args)
  "Set the FZF minor mode with the fzf buffer."
  :around #'fzf/start
  (message "called with args %S" args)
  (apply original-fn args)

  ;; set the FZF buffer to fzf-mode so we can hook ctrl+c
  (set-buffer "*fzf*")
  (fzf-mode))

(defvar fzf/args
  "-x --print-query -m --tiebreak=index --expect=ctrl-v,ctrl-x,ctrl-t")

(use-package! fzf
  :commands (fzf fzf-projectile fzf-hg fzf-git fzf-git-files fzf-directory
                 fzf-git-grep))
#+end_src
**** packages.el
#+begin_src emacs-lisp :tangle modules/tools/fzf/packages.el
;; -*- no-byte-compile: t; -*-
;;; tools/fzf/packages.el

(package! fzf)
#+end_src
*** magit +forge
#+name: magit-settings
#+begin_src emacs-lisp
;;; :tools magit
(setq magit-inhibit-save-previous-winconf t ; Don't restore wconf after quit magit
      forge-database-connector (when EMACS29+ 'sqlite-builtin)) ; buitin support
#+end_src

*** Tree-sitter
+ tree-sitter/
  #+name: README.org
  #+begin_src org :tangle modules/tools/tree-sitter/README.org :mkdirp yes
,#+TITLE:   tools/tree-sitter
,#+DATE:    October 26, 2020
,#+SINCE:   v3.0.0
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
- [[#configuration][Configuration]]
  - [[#face-remapping][Face remapping]]
- [[#troubleshooting][Troubleshooting]]

,* Description
# A summary of what this module does.
=:tools tree-sitter= sets up an Emacs binding for [[https://tree-sitter.github.io/][Tree-sitter]], an incremental
parsing system.

From the [[https://ubolonton.github.io/emacs-tree-sitter/][main package author]]:
,#+begin_quote
It aims to be the foundation for a new breed of Emacs packages that understand
code structurally. For example:

- Faster, fine-grained code highlighting.
- More flexible code folding.
- Structural editing (like Paredit, or even better) for non-Lisp code.
- More informative indexing for imenu.

The author of Tree-sitter articulated its merits a lot better in this Strange Loop talk.
,#+end_quote

The [[https://www.thestrangeloop.com/2018/tree-sitter---a-new-parsing-system-for-programming-tools.html][Strange Loop talk]]

,** Maintainers
+ @gagbo (Author)

,** Module Flags
# If this module has no flags, then...
This module provides no flags.

,** Plugins
# A list of linked plugins
+ [[https://github.com/ubolonton/emacs-tree-sitter/][emacs-tree-sitter]]


,* Prerequisites
This module has no prerequisites.

,* Features
# An in-depth list of features, how to use them, and their dependencies.

,* Configuration
# How to configure this module, including common problems and how to address them.
,** Face remapping
Tree sitter provides a lot more granular and language-specific faces. If you
want to remap some of them you can either customize the
=tree-sitter-hl-face:CAPTURE-NAME= face or advice the
=tree-sitter-hl-face-mapping-function= function as in the examples in
[[https://ubolonton.github.io/emacs-tree-sitter/syntax-highlighting/customization/#face-mappings][emacs-tree-sitter docs]]

,* Troubleshooting
# Common issues and their solution, or places to look for help.
  #+end_src
  #+name: config.el
  #+begin_src emacs-lisp :tangle modules/tools/tree-sitter/config.el
;;; tools/tree-sitter/config.el -*- lexical-binding: t; -*-

;; Does deferring loading to prog-mode-hook work ?
(use-package! tree-sitter-langs)

(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  #+end_src
  #+name: packages.el
  #+begin_src emacs-lisp :tangle modules/tools/tree-sitter/packages.el
;; -*- no-byte-compile: t; -*-
;;; tools/tree-sitter/packages.el

(package! tree-sitter)
(package! tree-sitter-langs)
  #+end_src
** Programming Language :lang:
This section adds packages and configuration on top of Doom Lang modules

*** Clojure
turn on paredit-mode (minor) after Clojure-mode was loaded (major)
#+begin_src emacs-lisp
;;; :lang clojure
(when (featurep! :lang clojure)
  (add-hook 'clojure-mode-hook #'paredit-mode))
#+end_src

*** JavaScript
**** Description
My Doom Emacs private JavaScript module with Add-on plugins.
This was made by doing relative symbolic links to Doom built-in JavaScript Module except for packages.el.

***** Plugins
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; lang/javascript/packages.el
#+end_src
[[https://github.com/defunkt/coffee-mode][coffee-mode]]
[[https://github.com/mooz/js2-mode][js2-mode]]
[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
[[https://github.com/emacs-typescript/typescript.el][typescript-mode]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Major modes
(package! rjsx-mode :built-in 'prefer)
(package! typescript-mode :built-in 'prefer)
#+end_src
[[https://github.com/magnars/js2-refactor.el][js2-refactor]]
[[https://github.com/mojochao/npm-mode][npm-mode]]
+ [[https://github.com/rajasegar/pnpm-mode][pnpm-mode]]
+ [[https://github.com/Galooshi/emacs-import-js][import-js]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Tools
(package! js2-refactor :built-in 'prefer)
(package! npm-mode :built-in 'prefer)
(package! add-node-modules-path :built-in 'prefer)
(package! pnpm-mode)
(package! import-js)
(package! yarn
  :recipe (:host github :repo "thaenalpha/yarn.el"))
#+end_src
[[https://github.com/abicky/nodejs-repl.el][nodejs-repl]]
[[https://github.com/skeeto/skewer-mode][skewer-mode]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Eval
(package! nodejs-repl :built-in 'prefer)
(package! skewer-mode :built-in 'prefer)
#+end_src
[[https://github.com/ananthakumaran/tide][tide]]
[[https://github.com/NicolasPetton/xref-js2][xref-js2]]*
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Programming environment
(package! tide :built-in 'prefer)
(when (featurep! :tools lookup)
  (package! xref-js2 :built-in 'prefer))
#+end_src

***** Appendix
| symbolic    | description   |
|-------------+---------------|
| =PACKAGE=   | Doom original |
| =+ PACKAGE= | Add-on plugin |

**** New features
+ automatically import dependencies in your JavaScript project.
+ Minor mode for working with pnpm projects
+ Minor mode for working with yarn projects

**** Prerequisites for
***** This module
You must open this doc in Emacs and run this code block by press enter:
(this works only if your Emacs and Doom configs path are defaults)
#+begin_src sh :tangle no
ln -s ../../../../.emacs.d/modules/lang/javascript/README.org modules/lang/javascript/README.org
ln -s ../../../../.emacs.d/modules/lang/javascript/autoload.el modules/lang/javascript/autoload.el
ln -s ../../../../.emacs.d/modules/lang/javascript/config.el modules/lang/javascript/config.el
ln -s ../../../../.emacs.d/modules/lang/javascript/doctor.el modules/lang/javascript/doctor.el
#+end_src
***** Running ImportJS in Emacs
1. Install the importjs binary:
   #+begin_src sh :dir /sudo:: :tangle no
sudo npm install import-js -g
   #+end_src
2. Configure Import-Js
3. Install Watchman as an performance booster to import-js daemon
   - macOS or Linux
     #+begin_src sh :tangle no
brew update && brew install watchman
     #+end_src

**** Configuration
These configs live inside the =+config.el= file and some are located in
=autoload/*.el= files.

As the =+config.el= is an [[file:~/.emacs.d/docs/getting_started.org::*Additional files][Additional file]],
This can be loaded with the ~load!~ macro, which will load an elisp file
relative to the file it's used from which is =init.el= in our case.

#+BEGIN_SRC emacs-lisp :tangle modules/lang/javascript/init.el
;; Omitting the file extension allows Emacs to load the byte-compiled version,
;; if it is available:
(load! "+config")
#+END_SRC
***** import-js
1. Run the import-js daemon
   * =M-x=  ~run-import-js~
   * The daemon will use watchman if installed to improve performance
   * Configure ~run-import-js~ to run on open a JavaScript oriented buffer:

     #+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;; lang/javascript/+config.el -*- lexical-binding: t; -*-
;;
;;; Tools

(add-hook! '(typescript-mode-local-vars-hook
             typescript-tsx-mode-local-vars-hook
             web-mode-local-vars-hook
             rjsx-mode-local-vars-hook)
  (defun import-js-setup ()
    "Start `import-js' in the current buffer."
    (let ((buffer-file-name (buffer-file-name (buffer-base-buffer))))
      (when (derived-mode-p 'js-mode 'typescript-mode 'typescript-tsx-mode)
        (if (null buffer-file-name)
            ;; necessary because `tide-setup' and `lsp' will error if not a
            ;; file-visiting buffer
            (add-hook 'after-save-hook #'import-js-setup
                      nil 'local)
          (if (executable-find "node")
              (and (require 'import-js nil t)
                   (progn (import-js-mode 1) (run-import-js) import-js-mode))
            (ignore
             (doom-log
              "Couldn't start the import-js daemon because 'node' is missing")))
          (remove-hook 'after-save-hook #'import-js-setup
                       'local))))))
     #+end_src
2. Import a file!
   * You can use something like =M-x=  ~import-js-import~ with your cursor over
     the desired module
   * It will be helpful to bind ~import-js-import~ to an easy-to-use binding,
     such as:

     #+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el :mkdirp yes :noweb no-export
;;; lang/javascript/autoload/import-js.el -*- lexical-binding: t; -*-

(defvar import-js-map (make-sparse-keymap) "Keymap for `import-js'.")
(map! (:map import-js-map
       <<import-js-goto>>
       "C-c i" (define-prefix-command 'import-js)
       :localleader "i" #'import-js)
      (:map import-js
       "f" #'import-js-fix
       "g" #'import-js-goto
       "i" #'import-js-import
       "k" #'kill-import-js
       "r" #'run-import-js))
     #+end_src
3. Go directly to a file
   * The ImportJS goto interface allows us to jump to a package
   * =M-x=  ~import-js-goto~ will jump to the appropriate file found by ImportJS
   * This should also be bound to something useful
     #+name: import-js-goto
     #+begin_src emacs-lisp :tangle no
:nv "g <f4>" #'import-js-goto
     #+end_src
4. Fix your imports
   * Optionally, you can configure ImportJS to fix your imports for you, adding unknown variables and removing unused imports. ImportJS uses eslint to find these variables.
   * `eslint` must be in your PATH.
   * eslint plugins must be installed for that specific version of eslint (if
     eslint is a global eslint, you may need to install the plugins globally)
   * Run with =M-x=  ~import-js-fix~
   * Configure ~import-js-fix~ to run on save:

     #+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el
 ;;;###autoload
(define-minor-mode import-js-mode
  "Minor mode for automatically Import Javascript dependencies."
  :lighter " importjs"
  :keymap import-js-map
  (if import-js-mode
      (add-hook 'after-save-hook #'import-js-fix nil t)
    (remove-hook 'after-save-hook #'import-js-fix t)))

;; Hooks

 ;;;###autoload
(defun +javascript-cleanup-import-js-processes-h ()
  "Clean up dangling import-js daemon process if there are no more buffers with `import-js-mode' active."
  (when import-js-mode
    (unless (cl-loop for buf in (delq (current-buffer) (buffer-list))
                     if (buffer-local-value 'import-js-mode buf)
                     return buf)
      (kill-import-js))))
     #+end_src
5. Cleanup importjsd process when no import-js buffers are left

   #+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package import-js
(use-package! import-js
  :config
  (add-hook! 'import-js-mode-hook
    (add-hook 'kill-buffer-hook #'+javascript-cleanup-import-js-processes-h
              nil 'local)))
   #+end_src

***** pnpm-mode
#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package pnpm-mode
(use-package! pnpm-mode
  :config
  (map! :localleader
        :map pnpm-mode-keymap
        "n" pnpm-mode-command-keymap)
  ;; Disable npm-mode when enabling pnpm
  (add-hook 'pnpm-mode-hook
            (defun turn-off-npm-mode () (npm-mode -1))))
#+end_src
****** Project Activation
By adding =.dir-locals.el= file on the root directory of a project containing:
#+begin_src emacs-lisp :tangle no
((nil . ((mode . pnpm))))
#+end_src
******* For more detail: [[https://github.com/rajasegar/pnpm-mode#project-activation][rajasegar/pnpm-mode: An Emacs minor mode for working with NPM projects.]]
Captured On: [2021-10-21 Thu 15:08]

***** yarn
****** keyboard bindings

This package doesn't provide keyboard bindings, so, I have to add them to my own module scripts.

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/yarn.el :mkdirp yes
;;; lang/javascript/autoload/yarn.el -*- lexical-binding: t; -*-

(defvar yarn--project-file-name "package.json"
  "The name of yarn project files.")

(defun yarn--project-file ()
  "Return path to the project file, or nil.
If project file exists in the current working directory, or a
parent directory recursively, return its path.  Otherwise, return
nil."
  (let ((dir (locate-dominating-file default-directory yarn--project-file-name)))
    (unless dir
      (error (concat "Error: cannot find " yarn--project-file-name)))
    (concat dir yarn--project-file-name)))

(defun yarn--get-project-property (prop)
  "Get the given PROP from the current project file."
  (let* ((project-file (yarn--project-file))
         (json-object-type 'hash-table)
         (json-contents (with-temp-buffer
                          (insert-file-contents project-file)
                          (buffer-string)))
         (json-hash (json-read-from-string json-contents))
         (value (gethash prop json-hash))
         (commands (list)))
    (cond ((hash-table-p value)
           (maphash (lambda (key value)
                      (setq commands
                            (append commands
                                    (list (list key (format "%s %s" "yarn" key))))))
                    value)
           commands)
          (t value))))

(defun yarn--exec-process (cmd &optional comint)
  "Execute a process running CMD.
Optional argument COMINT ."
  (let ((compilation-buffer-name-function
         (lambda (mode)
           (format "*yarn:%s - %s*"
                   (yarn--get-project-property "name") cmd))))
    (message (concat "Running " cmd))
    (compile cmd comint)))

(defun yarn-list ()
  "Run the 'yarn list' command."
  (interactive)
  (yarn--exec-process "yarn list --depth=0"))

(defun yarn-visit-project-file ()
  "Visit the project file."
  (interactive)
  (find-file (yarn--project-file)))

(defvar yarn-map (make-sparse-keymap)
  "Keymap for the `Yarn' package manager.")
(map! (:map yarn-map
       "C-c n" (define-prefix-command 'yarn)
       (:localleader "n" #'yarn))
      (:map yarn
       "i" #'yarn-install
       "n" #'yarn-init
       "a" #'yarn-add
       "d" #'yarn-add-dev
       "r" #'yarn-run
       "p" #'yarn-publish
       "t" #'yarn-test
       "v" #'yarn-visit-project-file
       "V" #'yarn-version
       "g" #'yarn-upgrade
       "u" #'yarn-update
       "U" #'yarn-remove
       "l" #'yarn-list))

;;;###autoload
(define-minor-mode yarn-mode
  "Minor mode for working with yarn projects."
  :lighter " yarn"
  :keymap yarn-map
  :group 'yarn)

;;;###autoload
(define-globalized-minor-mode yarn-global-mode
  yarn-mode
  yarn-mode)
#+end_src
#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package yarn
(use-package! yarn
  :config
  ;; Disable npm-mode when enabling yarn-mode
  (add-hook 'yarn-mode-hook #'turn-off-npm-mode))
#+end_src

****** Project Activation
By adding =.dir-locals.el= file on the root directory of a project containing:
#+begin_src emacs-lisp :tangle no
((nil . ((mode . yarn))))
#+end_src
******* For more detail: [[https://github.com/rajasegar/pnpm-mode#project-activation][rajasegar/pnpm-mode: An Emacs minor mode for working with NPM projects.]]
Captured On: [2021-10-21 Thu 15:08]

**** Troubleshooting
***** TODO import-js-daemon not running
After you M-x ~run-import-js~ command if there is an error about void symbol definition.
This likely your import-js npm installation is not succeed. You can test by running:
#+begin_src sh :tangle no
importjsd start
#+end_src
If it succeed it will return this
#+RESULTS:
: ImportJS (v4.0.2) DAEMON active. Logs will go to: /tmp/importjs.log

If not it will throw an error, the one I got is about it cannot find node_sqlite3 module.
This case is come from =node-pre-gyp= cannot find the a pre-compiled binary in the first place.
Then it uses `node-gyp` to build the extension but it failed without messages you anything.

*** Web
+ Tailwind LSP :+tailwind:
  #+begin_comment
  This sub-tree was taken from Jay Zawrotny's Doom Configures
  [[https://github.com/eccentric-j/dotfiles/blob/master/doom.d/config.org][dotfiles/config.org at master · eccentric-j/dotfiles · GitHub]]
  #+end_comment

  Provide tailwind class name completions as an extra LSP package.

  Install the lsp-tailwindcss emacs package: [[file:packages.org::*Packages in Use][Packages in Use]]

  Set add-on mode. This ensures both tailwind-lsp and the js or ts lsp servers
  run in parallel. Set ~lsp-tailwindcss-add-on-mode~ before the package loads.

  #+begin_src emacs-lisp
;;; :lang web
(use-package! lsp-tailwindcss
  :when (and (featurep! :tools lsp) (featurep! :lang web +tailwind))
  :init
  (setq lsp-tailwindcss-add-on-mode t
        lsp-tailwindcss-major-modes '(rjsx-mode web-mode html-mode css-mode
                                                typescript-mode typescript-tsx-mode)))
  #+end_src

  Lastly associate various template language files with html so that
  lsp-tailwindcss runs when editing .liquid files for example.

  #+begin_src emacs-lisp
(add-to-list 'lsp-language-id-configuration '(".*\\.liquid" . "html"))
  #+end_src

  Make sure to add the =+tailwind= flag to the =:lang web= module in [[./init.el][init.el]]!
*** Org-mode :lang:org:
- _Configuration_

  Put any basic configuration here

  #+begin_src emacs-lisp
;;; :lang org
(setq org-clock-sound "/mnt/c/Windows/Media/Alarm06.wav"
      org-support-shift-select t
      ;; use g{h,j,k} to traverse headings and TAB to toggle their visibility,
      ;; and leave C-left/C-right to .
      org-tree-slide-skip-outline-level 2
      org-startup-with-inline-images t)
  #+end_src

- _org hide emphasis markers_
  Doom Emacs already has set to hide emphasis markers in the org-tree-slide-mode.
  This is just good to known for hiding/showing its.

  #+begin_src emacs-lisp :tangle no
(defun org-toggle-emphasis ()
  "Toggle hiding/showing of org emphasis markers."
  (interactive)
  (if org-hide-emphasis-markers
      (setq org-hide-emphasis-markers nil)
    (setq org-hide-emphasis-markers t)))

(map! :map org-mode-map "C-c e" #'org-toggle-emphasis)
  #+end_src

  [[https://www.youtube.com/watch?v=zI0BvRSbcM8][Source]]

- _Org Capture from Web browser_

  To let this configuration works, =Org Capture= browser's extension and
  =org-protocol= handler is required.

  If you're a WSL user, you can run the one that matches how your emacs launches:
  #+begin_src sh :tangle no
powershell.exe ./org-protocol.reg
  #+end_src
  #+begin_src sh :tangle no
powershell.exe ./org-protocol-omz-emacs-plugin.reg
  #+end_src

  #+begin_src conf :tangle org-protocol.reg :tangle-mode (identity #o777)
REGEDIT4

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:Org Protocol"
"URL Protocol"=""
[HKEY_CLASSES_ROOT\org-protocol\shell]
[HKEY_CLASSES_ROOT\org-protocol\shell\open]
[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"C:\\Windows\\System32\\wsl.exe\" emacsclient \"%1\""
  #+end_src
  #+begin_src conf :tangle org-protocol-omz-emacs-plugin.reg :tangle-mode (identity #o777)
REGEDIT4

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:Org Protocol"
"URL Protocol"=""
[HKEY_CLASSES_ROOT\org-protocol\shell]
[HKEY_CLASSES_ROOT\org-protocol\shell\open]
[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"C:\\Windows\\System32\\wsl.exe\" zsh -l ~/.oh-my-zsh/plugins/emacs/emacsclient.sh --no-wait \"%1\""
  #+end_src

  Then set keys for =Selected Template= and =Unselected Template= in extension
  options to P&L to match with org-capture-templates for =org-protocol= set below.

  #+name: Capture templates
  #+begin_src emacs-lisp
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c)))
           string-to-transform)))

(require 'org-protocol)
(setq org-capture-templates
      (append
       org-capture-templates
       `(("P" "Protocol" entry
          (file+headline +org-capture-notes-file "Inbox")
          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
         ("L" "Protocol Link" entry
          (file+headline +org-capture-notes-file "Inbox")
          "* %? [[%:link][%(transform-square-brackets-to-round-ones
                          \"%:description\")]] \nCaptured On: %U")
         ("l" "Web site" entry
          (file+headline "webnotes.org" "Inbox")
          "* %a\nCaptured On: %U\nWebsite: %l\n\n%i\n%?")
         ("m" "meetup" entry (file "~/org/caldav.org")
          "* %?%:description \n%i\n%l")
         ("w" "Web site" entry
          (file+olp "~/org/inbox.org" "Web")
          "* %c :website:\n%U %?%:initial"))))
  #+end_src
  #+name: Org-roam roam-ref templates
  #+begin_src emacs-lisp
(setq  org-roam-capture-ref-templates
       '(("l" "Web site" plain (function org-roam-capture--get-point)
          "${body}\n%?"
          :file-name "%<%Y%m%d>-${slug}"
          :head "#+title: ${title}\n#+CREATED: %U\n#+roam_key: ${ref}\n\n"
          :unnarrowed t)))
  #+end_src

** Email :email: :email:
*** mu4e

This is my personal configuration.

I use =msmtp= to send mail:
#+begin_src emacs-lisp :noweb no-export
;;; :email mu4e
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-send-mail-function #'message-send-mail-with-sendmail
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        <<mu4e-policies>>
        mu4e-maildir-shortcuts '(("/thaenalpha@gmail.com/Job Applying".?j)))
  <<mu4e-email-accounts>>
  (mapc
   (lambda (bookmark) (add-to-list 'mu4e-bookmarks bookmark))
   `(     ; create bookmarks to show merged views of folders across accounts:
     <<mu4e-bookmarks>>)))
#+end_src

I have multiple email addresses set like these

#+name: mu4e-email-accounts
#+BEGIN_SRC emacs-lisp :tangle no
;; Each path is relative to the path of the maildir you passed to mu
(set-email-account!
 "boliden@gmail.com"
 '((mu4e-sent-folder       . "/boliden@gmail.com/[Gmail]/Sent Mail")
   (mu4e-drafts-folder     . "/boliden@gmail.com/[Gmail]/Drafts")
   (mu4e-spam-folder       . "/boliden@gmail.com/[Gmail]/Spam")
   (mu4e-trash-folder      . "/boliden@gmail.com/[Gmail]/Trash")
   (mu4e-refile-folder     . "/boliden@gmail.com/[Gmail]/All Mail")
   (smtpmail-smtp-user     . "boliden@gmail.com")
   (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
 t)
(set-email-account!
 "thaenalpha@gmail.com"
 '((mu4e-sent-folder       . "/thaenalpha@gmail.com/[Gmail]/Sent Mail")
   (mu4e-drafts-folder     . "/thaenalpha@gmail.com/[Gmail]/Drafts")
   (mu4e-spam-folder       . "/thaenalpha@gmail.com/[Gmail]/Spam")
   (mu4e-trash-folder      . "/thaenalpha@gmail.com/[Gmail]/Trash")
   (mu4e-refile-folder     . "/thaenalpha@gmail.com/[Gmail]/All Mail")
   (smtpmail-smtp-user     . "thaenalpha@gmail.com")
   (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
 t)
(set-email-account!
 "bolidenx@hotmail.com"
 '((mu4e-sent-folder       . "/bolidenx@hotmail.com/Sent")
   (mu4e-drafts-folder     . "/bolidenx@hotmail.com/Drafts")
   (mu4e-spam-folder       . "/bolidenx@hotmail.com/Junk")
   (mu4e-trash-folder      . "/bolidenx@hotmail.com/Deleted")
   (mu4e-refile-folder     . "/bolidenx@hotmail.com/Archive")
   (smtpmail-smtp-user     . "bolidenx@hotmail.com")
   (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
 t)
(set-email-account!
 "nopanun@live.com"
 '((mu4e-sent-folder       . "/nopanun@live.com/Sent")
   (mu4e-drafts-folder     . "/nopanun@live.com/Drafts")
   (mu4e-spam-folder       . "/nopanun@live.com/Junk")
   (mu4e-trash-folder      . "/nopanun@live.com/Deleted")
   (mu4e-refile-folder     . "/nopanun@live.com/Archive")
   (smtpmail-smtp-user     . "nopanun@live.com")
   (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
 t)
(set-email-account!
 "tannarin26@yahoo.com"
 '((mu4e-sent-folder       . "/tannarin26@yahoo.com/Sent")
   (mu4e-drafts-folder     . "/tannarin26@yahoo.com/Draft")
   (mu4e-spam-folder       . "/tannarin26@yahoo.com/Bulk Mail")
   (mu4e-trash-folder      . "/tannarin26@yahoo.com/Trash")
   (mu4e-refile-folder     . "/tannarin26@yahoo.com/Archive")
   (smtpmail-smtp-user     . "tannarin26@yahoo.com")
   (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
 t)
#+END_SRC

Change context behavior when opening mu4e and composing email with:
~mu4e-context-policy~ and ~mu4e-compose-context-policy~

#+name: mu4e-policies
#+begin_src emacs-lisp :tangle no
mu4e-context-policy         'ask-if-none
mu4e-compose-context-policy 'always-ask
#+end_src

*How to use contexts*

Examples:

- Compose new mail in a context
- Archive a message in a context (show which folder it goes to)
- Reply to a message in a merged search

You can create bookmarks to show merged views of folders across accounts:

#+name: mu4e-bookmarks
#+begin_src emacs-lisp :tangle no
(,(concat
   "m:/boliden@gmail.com/INBOX or m:/bolidenx@hotmail.com/Inbox or "
   "m:/nopanun@live.com/Inbox or m:/tannarin26@yahoo.com/Inbox or "
   "m:/thaenalpha@gmail.com/INBOX or m:/nopanun@live.com/IT Demands")
 "All Inboxes" ?i)
(,(concat
   "m:/boliden@gmail.com/[Gmail]/Sent Mail or m:/bolidenx@hotmail.com/Sent "
   "m:/thaenalpha@gmail.com/[Gmail]/Sent Mail or m:/nopanun@live.com/Sent or"
   " m:/tannarin26@yahoo.com/Sent") "All Sent" ?s)
(,(concat
   "m:/boliden@gmail.com/[Gmail]/Drafts or m:/bolidenx@hotmail.com/Drafts "
   "m:/thaenalpha@gmail.com/[Gmail]/Drafts or m:/nopanun@live.com/Drafts or "
   "m:/tannarin26@yahoo.com/Draft") "All Drafts" ?d)
(,(concat
   "m:/boliden@gmail.com/[Gmail]/All Mail or m:/bolidenx@hotmail.com/Archive"
   " m:/thaenalpha@gmail.com/[Gmail]/All Mail or m:/nopanun@live.com/Archive"
   " or m:/tannarin26@yahoo.com/Archive") "All Archives" ?a)
(,(concat
   "m:/boliden@gmail.com/[Gmail]/Spam or m:/bolidenx@hotmail.com/Junk or "
   "m:/thaenalpha@gmail.com/[Gmail]/Spam or m:/nopanun@live.com/Junk or "
   "m:/tannarin26@yahoo.com/Bulk Mail") "All Spams" ?p)
(,(concat
   "m:/boliden@gmail.com/[Gmail]/Trash or m:/bolidenx@hotmail.com/Deleted or"
   " m:/thaenalpha@gmail.com/[Gmail]/Trash or m:/nopanun@live.com/Deleted or"
   " m:/tannarin26@yahoo.com/Trash") "All Trashes" ?t)
#+end_src

This is your e-mail client to build!

** Apps :app:
*** Edit-Server
**** README.org
#+begin_src org :tangle no
,#+TITLE:   app/edit-server
,#+DATE:    January 13, 2022
,#+SINCE:   v3.0.0-alpha
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
- [[#configuration][Configuration]]
- [[#troubleshooting][Troubleshooting]]

,* Description
Server that responds to edit requests from Chrome or Firefox

,** Maintainers
+ [[https://github.com/thaenalpha][@thaenalpha]] (Author)

,** Module Flags
This module provides no flags.

,** Plugins
+ [[https://github.com/stsquad/emacs_chrome][edit-server]]

,* Prerequisites
Install dependency: Edit with Emacs Chrome/Firefox extension
[[https://github.com/stsquad/emacs_chrome][stsquad/emacs_chrome: A Chromium "clone" of It's All Text for spawni...]]

,* Features
# An in-depth list of features, how to use them, and their dependencies.

,* Configuration
Set major mode for each site.

,* Troubleshooting
# Common issues and their solution, or places to look for help.

#+end_src
**** config.el
#+begin_src emacs-lisp :tangle modules/app/edit-server/config.el
;;; app/edit-server/config.el -*- lexical-binding: t; -*-

(use-package! edit-server
  :commands edit-server-start
  :init (edit-server-start)
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x)))
  (setq edit-server-url-major-mode-alist
        '(("github\\.com" . markdown-mode))))
#+end_src
**** packages.el
Installing edit-server from MELPA

+ ~install~ as a doom :app module (You need to add =edit-server= at :app in =init.el=)

#+begin_src emacs-lisp :tangle modules/app/edit-server/packages.el
;; -*- no-byte-compile: t; -*-
;;; app/edit-server/packages.el

(package! edit-server)
#+end_src

- ~uninstall~ by replace =:tangle= value in ~install~ block with =no= and just press enter at the block below:
  #+begin_src sh :tangle no
rm -r modules/app/edit-server
  #+end_src

*** Mastodon :social:microblogging:
**** README.org
#+begin_src org :tangle modules/app/mastodon/README.org :mkdirp yes
,#+TITLE:   app/mastodon
,#+DATE:    January 13, 2022
,#+SINCE:   v3.0.0-alpha
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:

,* Description
Enjoy Mastodon from emacs.

+

,** Maintainers
+ [[https://github.com/thaenalpha][@thaenalpha]] (Author)

,** Module Flags
This module provides no flags.

,** Plugins
+ [[https://git.blast.noho.st/mouse/mastodon.el][mastodon]]

,** Hacks
# A list of internal modifications to included packages; omit if unneeded

,* Prerequisites
This module has no prerequisites.

,* Features
# An in-depth list of features, how to use them, and their dependencies.

,* Configuration
# How to configure this module, including common problems and how to address them.

,* Troubleshooting
# Common issues and their solution, or places to look for help.
#+end_src
**** packages.el
#+begin_src emacs-lisp :tangle modules/app/mastodon/packages.el :mkdirp yes
(package! mastodon)
#+end_src

*** Telega - full featured unofficial client for Telegram platform for GNU Emacs.
**** Installation
telega depends on the visual-fill-column and rainbow-identifiers packages.
This dependency automatically installs if you install telega from MELPA or
GNU Guix. Otherwise, you will need to install these packages by hand.

telega is built on top of the official library provided by Telegram TDLib.
Most distributions do not provide this package in their repositories, in
which case you will have to install it manually by following the instructions.

GNU Guix, however, does have both telega and TDLib packaged.
If you use GNU Guix you can skip directly to Installing from GNU Guix.

***** Dependencies
Look for all dependencies at [[https://zevlg.github.io/telega.el/][Telega Manual (v0.7.018)]]
****** GNU gperf (for building TDLib)
******* Guix users
#+begin_src sh :tangle no
guix install gperf
#+end_src

***** Building TDLib

TDLib is the library for building Telegram clients. It requires a large amount of memory to be built.
Make sure you are using TDLib version greater or equal to 1.7.0.

On MacOS you can install a pre-built TDLib package using Homebrew from brew.sh.
Just run:

#+begin_src sh :tangle no
brew install tdlib
#+end_src
On Linux, you will need to build TDLib from source.

To get the source:

#+begin_src sh :tangle no
git clone https://github.com/tdlib/td.git
#+end_src

Move into the folder with $ cd ./td or wherever you checked out td.

Prepare a folder for building the library:

#+begin_src sh :tangle no
cd ./td && mkdir build && cd build && cmake ../
#+end_src

Build the sources:

#+begin_src sh :tangle no
cd ./td/build && make -jN # Change N first, read a description below.
#+end_src

With N number of cores that should be used for the compilation
(the optimal value is the number of physical cores on the machine).

Finally, to install the library system-wide:

#+begin_src sh :dir (concat /sudo::/home/" user-login-name "/.doom.d") :tangle no
cd ./td/build && sudo make install
#+end_src

It will install headers to =/usr/local/include= and library itself into =/usr/local/lib=.
If you have TDLib installed in other location, don't forget to modify ~telega-server-libs-prefix~ before starting telega.
#+begin_src emacs-lisp :tangle no
;; I'm a Guix user.
(use-package telega-server
  :defer t
  :when (featurep! :app telega)
  :config
  (setq! telega-server-libs-prefix "~/.guix-profile"))
#+end_src
***** Installing telega from MELPA

+ ~install~ as a doom :app module (You need to add =telega= at :app in =init.el=)

  #+begin_src emacs-lisp :tangle modules/app/telega/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/telega/packages.el

(package! telega)
  #+end_src

- ~uninstall~ by replace =:tangle= value in ~install~ block with =no= and just press enter at the block below:
  #+begin_src sh :tangle no
rm -r modules/app/telega
  #+end_src

** Terminal :term:
*** vterm
In Vterm I prefer =ESC= to be a ~vterm--self-insert~
#+begin_src emacs-lisp
;;; :term vterm
(add-hook 'vterm-mode-hook #'evil-collection-vterm-toggle-send-escape)
#+end_src
Other keybinds these should be...
#+name: vterm-kbd
#+begin_src emacs-lisp :tangle no
(:when (featurep! :term vterm)
 :map vterm-mode-map
 :i "C-j"   #'vterm--self-insert
 "C-c C-x"  #'vterm--self-insert)
#+end_src
** Configure :config:
*** default
More keybinds for literate configs
#+name: default
#+begin_src emacs-lisp :tangle no
:map  help-map
"rk"       #'keychain-refresh-environment
"di"  (cmd! (find-file (expand-file-name "init.org"     doom-private-dir)))
"do"  (cmd! (find-file (expand-file-name "config.org"   doom-private-dir)))
"dpo" (cmd! (find-file (expand-file-name "packages.org" doom-private-dir)))
#+end_src
* Local Configures
** Directory Local Variables
=SPC p e= ~projectile-edit-dir-locals~
This command let you custom project variables in =.dir-locals.el=
For more information see (info "(emacs) Directory Variables")

#+begin_src emacs-lisp :tangle .dir-locals.el
((nil . ((projectile-project-name . "oh-my-system") ; Edit project name .doom.d
         (indent-tabs-mode . nil)
         (git-commit-major-mode . git-commit-elisp-text-mode)
         (fill-column . 80)
         (sentence-end-double-space . t)
         (emacs-lisp-docstring-fill-column . 75)
         (project-vc-merge-submodules . nil)))
 (org-mode . ((flycheck-textlint-executable . "node_modules/.bin/textlint"))))
#+end_src
To makes README.org buffer read-only

#+begin_src emacs-lisp :tangle modules/.dir-locals.el
((org-mode (buffer-read-only . t)))
#+end_src
** safe-local-variables
Emacs treat some variable as a risky-local-variable and will request your
permission to apply these variables every time when accessing a file within a
directory that contains settings for these variable in =.dir-locals.el= file.

#+begin_src emacs-lisp
;;
;;; Local Variables
(put 'flycheck-textlint-executable 'safe-local-variable #'stringp)
(put 'quickrun-option-command      'safe-local-variable #'stringp)
#+end_src

** Marking the root of a project
~projectile-project-root-files-bottom-up~
A list of files considered marking the root of a project.

#+begin_src emacs-lisp :tangle no
(after! projectile
   (setq projectile-project-root-files-bottom-up
       (remove ".git" projectile-project-root-files-bottom-up)))
#+end_src

#+RESULTS:
| .projectile | .project |

#+Original Value:
| .projectile | .git | .hg | .fslckout | _FOSSIL_ | .bzr | _darcs |
