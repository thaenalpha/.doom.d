#+TITLE:   Doom configuration
#+DATE: <2021-09-17 Fri>
#+begin_src emacs-lisp
;; For e.g. GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Nopanun Laochunhanun"
      user-mail-address "nopanun@pm.me")
#+end_src

* Personalization
** Themes
Set your light and dark theme here

#+begin_src emacs-lisp
(setq light 'doom-acario-light)
(setq dark 'doom-ayu-mirage)
#+end_src

Choose your mode

#+begin_src emacs-lisp
(setq doom-theme light)            ; default in Light mode
#+end_src

Or automatic (if it's not desired just add ~:tangle no~ to disable tangling)

#+begin_src emacs-lisp
(defun synchronize-theme ()
  (setq hour                          ; current hour
      (string-to-number
          (substring (current-time-string) 11 13)))
  (if (member hour (number-sequence 6 17)) ; Check if daytime's period
      (setq now light)                     ; true: Light
      (setq now dark))                     ; else: Dark
  (if (equal now doom-theme)          ; if now is Light
      nil                             ; do nothing
    (progn                            ; else
      (setq doom-theme now)           ; set to Dark
      (doom/reload-theme))))          ; and reload

(run-with-timer 0 3600 'synchronize-theme) ; check for every hour
#+end_src

** Modeline
I want to use [[https://github.com/TeMPOraL/nyan-mode][Nyan Mode]] with doom-modeline and I want to add =+nyan= flag to the modeline module, what I need to do is to hack the ~ui/modeline/packages.el~ file locates in .emacs.d/modules directory to add the nyan-mode package, add +nyan.el for config file and add some code into the module. (I've done this in my doom-emacs fork, and I'm attempting to introduce it to upstream soon)

** Fonts
+ [[https://input.djr.com/download/][Input: Fonts for Code — Download]] Free for private use
+ [[https://bboxtype.com/typefaces/FiraGO/][FiraGO]] Global Language Extension of the Open Font Family Fira Sans
Arabic · Devanagari · Georgian · Hebrew · Thai
+ [[https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode][FiraCode NF]] free monospaced font with programming ligatures Nerd Font

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "Noto Serif" :size 13)
      doom-unicode-font (font-spec :family "DejaVu Sans Mono")
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 19))
#+end_src
** Dashboard quick actions config from Tecosaur's Emacs configuration
When using the dashboard, there are often a small number of actions I will take.
As the dashboard is it’s own major mode, there is no need to suffer the tyranny
of unnecessary keystrokes — we can simply bind common actions to a single key!

#+begin_src emacs-lisp
(map! :map +doom-dashboard-mode-map
      :ne "l" #'doom/quickload-session
      :ne "a" #'org-agenda
      :ne "f" #'find-file
      :ne "r" #'consult-recent-file
      :ne "p" #'projectile-switch-project
      :ne "P" #'doom/open-private-config
      :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
      :ne "." (cmd! (doom-project-find-file "~/.config/")) ; . for dotfiles
      :ne "b" #'+vertico/switch-workspace-buffer
      :ne "B" #'consult-buffer
      :ne "q" #'save-buffers-kill-terminal
      :ne "h" #'doom/help)
#+end_src


* Projectile
** projectile-project-name
This config will let you custom project name in .dir-locals.el

#+begin_src emacs-lisp
(put 'projectile-project-name 'safe-local-variable #'stringp)
(put 'flycheck-textlint-executable 'safe-local-variable #'stringp)
#+end_src

and this code defines changes project name from .doom.d to

#+begin_src emacs-lisp :tangle .dir-locals.el
;;; Directory Local Variables
;;; For more information see (info "(emacs) Directory Variables")

((nil . ((projectile-project-name . "oh-my-system")))
 (org-mode . ((flycheck-textlint-executable . "node_modules/.bin/textlint"))))
#+end_src

** projectile-project-root-files-bottom-up
A list of files considered marking the root of a project.

#+begin_src emacs-lisp :tangle no
(after! projectile
   (setq projectile-project-root-files-bottom-up
       (remove ".git" projectile-project-root-files-bottom-up)))
#+end_src

#+RESULTS:
| .projectile | .project |

#+Original Value:
| .projectile |  .git | .hg | .fslckout | _FOSSIL_ | .bzr | _darcs |

* Deft
** Configuration
To use deft, you first need to specify the directory in which your notes are stored:

#+begin_src emacs-lisp
;; deft
(setq deft-directory "~/notes")
#+end_src

The default note format is org-mode. You can change this by setting the value of
the variable ~deft-default-extension~. Replacing the value with ~"md"~, for example,
will change the default note format to Markdown:

#+begin_src emacs-lisp :tangle no
(setq deft-default-extension "md")
#+end_src

You may also want to alter the way titles and file names are automatically created by editing ~deft-use-filename-as-title~ and/or ~deft-use-filter-string-for-filename~.

Further customization options can be found here: https://github.com/jrblevin/deft#other-customizations

* Email & accounts

This is my personal configuration. I have multiple email addresses set like these

#+BEGIN_SRC emacs-lisp
;; Each path is relative to the path of the maildir you passed to mu
(set-email-account! "boliden@gmail.com"
  '((mu4e-sent-folder       . "/boliden@gmail.com/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/boliden@gmail.com/[Gmail]/Drafts")
    (mu4e-spam-folder       . "/boliden@gmail.com/[Gmail]/Spam")
    (mu4e-trash-folder      . "/boliden@gmail.com/[Gmail]/Trash")
    (mu4e-refile-folder     . "/boliden@gmail.com/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "boliden@gmail.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "thaenalpha@gmail.com"
  '((mu4e-sent-folder       . "/thaenalpha@gmail.com/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/thaenalpha@gmail.com/[Gmail]/Drafts")
    (mu4e-spam-folder       . "/thaenalpha@gmail.com/[Gmail]/Spam")
    (mu4e-trash-folder      . "/thaenalpha@gmail.com/[Gmail]/Trash")
    (mu4e-refile-folder     . "/thaenalpha@gmail.com/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "thaenalpha@gmail.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "bolidenx@hotmail.com"
  '((mu4e-sent-folder       . "/bolidenx@hotmail.com/Sent")
    (mu4e-drafts-folder     . "/bolidenx@hotmail.com/Drafts")
    (mu4e-spam-folder       . "/bolidenx@hotmail.com/Junk")
    (mu4e-trash-folder      . "/bolidenx@hotmail.com/Deleted")
    (mu4e-refile-folder     . "/bolidenx@hotmail.com/Archive")
    (smtpmail-smtp-user     . "bolidenx@hotmail.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "nopanun@live.com"
  '((mu4e-sent-folder       . "/nopanun@live.com/Sent")
    (mu4e-drafts-folder     . "/nopanun@live.com/Drafts")
    (mu4e-spam-folder       . "/nopanun@live.com/Junk")
    (mu4e-trash-folder      . "/nopanun@live.com/Deleted")
    (mu4e-refile-folder     . "/nopanun@live.com/Archive")
    (smtpmail-smtp-user     . "nopanun@live.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "tannarin26@yahoo.com"
  '((mu4e-sent-folder       . "/tannarin26@yahoo.com/Sent")
    (mu4e-drafts-folder     . "/tannarin26@yahoo.com/Draft")
    (mu4e-spam-folder       . "/tannarin26@yahoo.com/Bulk Mail")
    (mu4e-trash-folder      . "/tannarin26@yahoo.com/Trash")
    (mu4e-refile-folder     . "/tannarin26@yahoo.com/Archive")
    (smtpmail-smtp-user     . "tannarin26@yahoo.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
#+END_SRC

Change context behavior when opening mu4e and composing email with:
~mu4e-context-policy~ and ~mu4e-compose-context-policy~

#+begin_src emacs-lisp
(setq mu4e-context-policy 'ask-if-none
      mu4e-compose-context-policy 'always-ask)
#+end_src

** How to use contexts

Examples:

- Compose new mail in a context
- Archive a message in a context (show which folder it goes to)
- Reply to a message in a merged search

You can create bookmarks to show merged views of folders across accounts:

#+begin_src emacs-lisp
(after! mu4e
 (setq sendmail-program (executable-find "msmtp")
       send-mail-function #'smtpmail-send-it
       message-sendmail-f-is-evil t
       message-sendmail-extra-arguments '("--read-envelope-from")
       message-send-mail-function #'message-send-mail-with-sendmail
       mu4e-maildir-shortcuts '(("/thaenalpha@gmail.com/Job Applying".?j)))

 (defun add-mu4e-bookmark (bookmark)
   (add-to-list 'mu4e-bookmarks bookmark))

 (mapc 'add-mu4e-bookmark
   '(("m:/boliden@gmail.com/INBOX or m:/bolidenx@hotmail.com/Inbox or m:/nopanun@live.com/Inbox or m:/tannarin26@yahoo.com/Inbox or m:/thaenalpha@gmail.com/INBOX or m:/nopanun@live.com/IT Demands" "All Inboxes" ?i)
     ("m:/boliden@gmail.com/[Gmail]/Sent Mail or m:/bolidenx@hotmail.com/Sent m:/thaenalpha@gmail.com/[Gmail]/Sent Mail or m:/nopanun@live.com/Sent or m:/tannarin26@yahoo.com/Sent" "All Sent" ?s)
     ("m:/boliden@gmail.com/[Gmail]/Drafts or m:/bolidenx@hotmail.com/Drafts m:/thaenalpha@gmail.com/[Gmail]/Drafts or m:/nopanun@live.com/Drafts or m:/tannarin26@yahoo.com/Draft" "All Drafts" ?d)
     ("m:/boliden@gmail.com/[Gmail]/All Mail or m:/bolidenx@hotmail.com/Archive m:/thaenalpha@gmail.com/[Gmail]/All Mail or m:/nopanun@live.com/Archive or m:/tannarin26@yahoo.com/Archive" "All Archives" ?a)
     ("m:/boliden@gmail.com/[Gmail]/Spam or m:/bolidenx@hotmail.com/Junk or m:/thaenalpha@gmail.com/[Gmail]/Spam or m:/nopanun@live.com/Junk or m:/tannarin26@yahoo.com/Bulk Mail" "All Spams" ?p)
     ("m:/boliden@gmail.com/[Gmail]/Trash or m:/bolidenx@hotmail.com/Deleted or m:/thaenalpha@gmail.com/[Gmail]/Trash or m:/nopanun@live.com/Deleted or m:/tannarin26@yahoo.com/Trash" "All Trashes" ?t))))
#+end_src

This is your e-mail client to build!

* Org-Mode
** Configuration

Put any basic configuration here

#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-clock-sound "/mnt/c/Windows/Media/Alarm06.wav")
#+end_src

** Org Capture from Web browser

To let this configuration works, =Org Capture= browser's extension and
=org-protocol= handler is required. (For setting up =org-protocol= handler,
if you're WSL user you can run ~org-protocol.reg~ file in my doom repository)
Then set keys for ~Selected Template~ and ~Unselected Template~ in extension
options to P&L.

#+begin_src emacs-lisp
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c)))
           string-to-transform)))

(require 'org-protocol)
(setq org-capture-templates
  (append org-capture-templates
    `(("P" "Protocol" entry
       (file+headline ,(concat org-directory "notes.org") "Inbox")
       "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
      ("L" "Protocol Link" entry
       (file+headline ,(concat org-directory "notes.org") "Inbox")
       "* %? [[%:link][%(transform-square-brackets-to-round-ones
                        \"%:description\")]] \nCaptured On: %U")
      ("w" "Web site" entry
       (file+olp "~/org/inbox.org" "Web")
       "* %c :website:\n%U %?%:initial"))))
#+end_src

* App
** Telega --- full featured unofficial client for Telegram platform for GNU Emacs.
*** Installation
telega depends on the visual-fill-column and rainbow-identifiers packages. This dependency automatically installs if you install telega from MELPA or GNU Guix. Otherwise, you will need to install these packages by hand.

telega is built on top of the official library provided by Telegram TDLib. Most distributions do not
provide this package in their repositories, in which case you will have to install it manually by
following the instructions.

GNU Guix, however, does have both telega and TDLib packaged. If you use GNU Guix you can skip
directly to Installing from GNU Guix.

**** Dependencies
Look for all dependencies at [[https://zevlg.github.io/telega.el/][Telega Manual (v0.7.018)]]
***** GNU gperf (for building TDLib)
****** Guix users
#+begin_src sh :tangle no
  guix install gperf
#+end_src

**** Building TDLib

TDLib is the library for building Telegram clients. It requires a large amount of memory to be built.
Make sure you are using TDLib version greater or equal to 1.7.0.

On MacOS you can install a pre-built TDLib package using Homebrew from brew.sh. Just run:

$ brew install tdlib

On Linux, you will need to build TDLib from source.

To get the source:

#+begin_src sh :tangle no
  git clone https://github.com/tdlib/td.git
#+end_src

Move into the folder with $ cd ./td or wherever you checked out td.

Prepare a folder for building the library:

#+begin_src sh :tangle no
  cd ./td && mkdir build && cd build && cmake ../
#+end_src

Build the sources:

#+begin_src sh :tangle no
  cd ./td/build && make -jN # Change N first, read a description below.
#+end_src

With N number of cores that should be used for the compilation (the optimal value is the number of
physical cores on the machine).

Finally, to install the library system-wide:

#+begin_src sh :tangle no
  cd ./td/build && sudo make install # this one not works because it prompts you for password. Need to launchs from shell.
#+end_src

It will install headers to /usr/local/include and library itself into /usr/local/lib. If you have TDLib installed
in other location, don't forget to modify telega-server-libs-prefix before starting telega.

**** Installing telega from MELPA

+ ~install~ as a doom :app module (You need to add =telega= at :app in =init.el=)

#+begin_src emacs-lisp :tangle modules/app/telega/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/telega/packages.el

(package! telega :built-in 'prefer)
#+end_src

- ~uninstall~ by replace =:tangle= value in ~install~ block with =no= and just press enter at the block below:
  #+begin_src sh :tangle no
    rm -r modules/app/telega
  #+end_src

** Edit-Server --- server that responds to edit requests from Chrome
*** Installation
**** Dependencies
***** Edit with Emacs Chrome/Firefox extension
[[https://github.com/stsquad/emacs_chrome][GitHub - stsquad/emacs_chrome: A Chromium "clone" of It's All Text for spawni...]]

**** Installing edit-server from MELPA

+ ~install~ as a doom :app module (You need to add =edit-server= at :app in =init.el=)

#+begin_src emacs-lisp :tangle modules/app/edit-server/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/edit-server/packages.el

(package! edit-server :built-in 'prefer)
#+end_src

- ~uninstall~ by replace =:tangle= value in ~install~ block with =no= and just press enter at the block below:
  #+begin_src sh :tangle no
    rm -r modules/app/edit-server
  #+end_src

**** Configuration
#+begin_src emacs-lisp :tangle modules/app/edit-server/config.el
;;; app/edit-server/config.el -*- lexical-binding: t; -*-

(use-package! edit-server
  :defer t
  :commands edit-server-start
  :init (edit-server-start)
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x)))
  (setq edit-server-url-major-mode-alist
        '(("github\\.com" . markdown-mode))))
#+end_src

* Programming language
This section adds packages and configuration on top of Doom Lang modules

** Clojure
turn on paredit-mode (minor) after Clojure-mode was loaded (major)
#+begin_src emacs-lisp
(when (featurep! :lang clojure)
   (add-hook 'clojure-mode-hook 'paredit-mode))
#+end_src

** JavaScript
*** Description
My Doom Emacs private JavaScript module with Add-on plugins.
This was made by doing relative symbolic links to Doom built-in JavaScript Module except for packages.el.

**** Plugins
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; lang/javascript/packages.el
#+end_src
[[https://github.com/defunkt/coffee-mode][coffee-mode]]
[[https://github.com/mooz/js2-mode][js2-mode]]
[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
[[https://github.com/emacs-typescript/typescript.el][typescript-mode]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Major modes
(package! rjsx-mode :built-in 'prefer)
(package! typescript-mode :built-in 'prefer)
#+end_src
[[https://github.com/magnars/js2-refactor.el][js2-refactor]]
[[https://github.com/mojochao/npm-mode][npm-mode]]
+ [[https://github.com/rajasegar/pnpm-mode][pnpm-mode]]
+ [[https://github.com/Galooshi/emacs-import-js][import-js]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Tools
(package! js2-refactor :built-in 'prefer)
(package! npm-mode :built-in 'prefer)
(package! add-node-modules-path :built-in 'prefer)
(package! pnpm-mode)
(package! import-js)
#+end_src
[[https://github.com/abicky/nodejs-repl.el][nodejs-repl]]
[[https://github.com/skeeto/skewer-mode][skewer-mode]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Eval
(package! nodejs-repl :built-in 'prefer)
(package! skewer-mode :built-in 'prefer)
#+end_src
[[https://github.com/ananthakumaran/tide][tide]]
[[https://github.com/NicolasPetton/xref-js2][xref-js2]]*
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Programming environment
(package! tide :built-in 'prefer)
(when (featurep! :tools lookup)
  (package! xref-js2 :built-in 'prefer))
#+end_src

**** Appendix
| symbolic    | description   |
|-------------+---------------|
| =PACKAGE=   | Doom original |
| =+ PACKAGE= | Add-on plugin |

*** New features
+ automatically import dependencies in your JavaScript project.
+ Minor mode for working with pnpm projects

*** Prerequisites for
**** This module
You must open this doc in Emacs and run this code block by press enter:
(this works only if your Emacs and Doom configs path are defaults)
#+begin_src sh :tangle no
ln -s ../../../../.emacs.d/modules/lang/javascript/README.org modules/lang/javascript/README.org
ln -s ../../../../.emacs.d/modules/lang/javascript/autoload.el modules/lang/javascript/autoload.el
ln -s ../../../../.emacs.d/modules/lang/javascript/config.el modules/lang/javascript/config.el
ln -s ../../../../.emacs.d/modules/lang/javascript/doctor.el modules/lang/javascript/doctor.el
#+end_src
**** Running ImportJS in Emacs
1. Install the importjs binary:
   #+begin_src sh :dir /sudo:: :tangle no
   sudo npm install import-js -g
   #+end_src
2. Configure Import-Js
3. Install Watchman as an performance booster to import-js daemon
   - macOS or Linux
    #+begin_src sh :tangle no
     brew update && brew install watchman
    #+end_src

*** Configuration
These configs live inside the =+config.el= file and some are located in =autoload/*.el= files.

As the =+config.el= is an [[file:~/.emacs.d/docs/getting_started.org::*Additional files][Additional file]],
This can be loaded with the ~load!~ macro, which will load an elisp file
relative to the file it's used from which is =init.el= in our case.

#+BEGIN_SRC emacs-lisp :tangle modules/lang/javascript/init.el
;; Omitting the file extension allows Emacs to load the byte-compiled version,
;; if it is available:
(load! "+config")
#+END_SRC
**** import-js
1. Run the import-js daemon
   * =M-x=  ~run-import-js~
   * The daemon will use watchman if installed to improve performance
   * Configure ~run-import-js~ to run on open a JavaScript oriented buffer:

#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;; lang/javascript/+config.el -*- lexical-binding: t; -*-
;;
;;; Tools

(add-hook! '(typescript-mode-local-vars-hook
             typescript-tsx-mode-local-vars-hook
             web-mode-local-vars-hook
             rjsx-mode-local-vars-hook)
  (defun import-js-setup ()
    (when (derived-mode-p 'js-mode 'typescript-mode 'typescript-tsx-mode)
     (if (executable-find "node")
         (and (require 'import-js nil t)
              (progn (import-js-mode 1) (run-import-js) import-js-mode))
       (ignore
        (doom-log
         "Couldn't start the import-js daemon because 'node' is missing")))
         )))
#+end_src
2. Import a file!
   * You can use something like =M-x=  ~import-js-import~ with your cursor over the desired module
   * It will be helpful to bind ~import-js-import~ to an easy-to-use binding, such as:

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el :mkdirp yes
;;; lang/javascript/autoload/import-js.el -*- lexical-binding: t; -*-

(defvar import-js-map (make-sparse-keymap) "Keymap for `import-js'.")
(map! (:map import-js-map
       "C-c i" (define-prefix-command #'import-js)
       (:localleader "i" #'import-js)
#+end_src
3. Go directly to a file
   * The ImportJS goto interface allows us to jump to a package
   * =M-x=  ~import-js-goto~ will jump to the appropriate file found by ImportJS
   * This should also be bound to something useful

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el
       "g <f4>" #'import-js-goto)
   ;; and the rest.
      (:map import-js
       "f" #'import-js-fix
       "g" #'import-js-goto
       "i" #'import-js-import
       "k" #'kill-import-js
       "r" #'run-import-js))
#+end_src
4. Fix your imports
  * Optionally, you can configure ImportJS to fix your imports for you, adding unknown variables and removing unused imports. ImportJS uses eslint to find these variables.
  * `eslint` must be in your PATH.
  * eslint plugins must be installed for that specific version of eslint (if
    eslint is a global eslint, you may need to install the plugins globally)
  * Run with =M-x=  ~import-js-fix~
  * Configure ~import-js-fix~ to run on save:

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el
;;;###autoload
(define-minor-mode import-js-mode
  "Minor mode for automatically Import Javascript dependencies."
  :lighter " importjs"
  :keymap import-js-map
  (if import-js-mode
       (add-hook 'after-save-hook #'import-js-fix nil t)
   (remove-hook 'after-save-hook #'import-js-fix t)))

;; Hooks

;;;###autoload
(defun +javascript-cleanup-import-js-processes-h ()
  "Clean up dangling import-js daemon process if there are no more buffers with `import-js-mode' active."
  (when import-js-mode
    (unless (cl-loop for buf in (delq (current-buffer) (buffer-list))
                     if (buffer-local-value 'import-js-mode buf)
                     return buf)
      (kill-import-js))))
#+end_src
5. Cleanup importjsd process when no import-js buffers are left

#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package import-js
(use-package! import-js
    :config
    (add-hook! 'import-js-mode-hook
      (add-hook 'kill-buffer-hook #'+javascript-cleanup-import-js-processes-h
                nil 'local)))
#+end_src

**** pnpm-mode
#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package pnpm-mode
(use-package! pnpm-mode
   :config
   (map! :localleader
         :map pnpm-mode-keymap
          "n" pnpm-mode-command-keymap)
   ;; Disable npm-mode when enabling pnpm
   (add-hook 'pnpm-mode-hook
      (defun turn-off-npm-mode () (npm-mode -1))))
#+end_src
***** Project Activation
By adding ~.dir-locals.el~ file on the root directory of a project containing:
#+begin_src emacs-lisp :tangle no
((nil . ((mode . pnpm))))
#+end_src
****** For more detail: [[https://github.com/rajasegar/pnpm-mode#project-activation][rajasegar/pnpm-mode: An Emacs minor mode for working with NPM projects.]]
Captured On: [2021-10-21 Thu 15:08]

*** Troubleshooting
**** TODO import-js-daemon not running
After you M-x ~run-import-js~ command if there is an error about void symbol definition.
This likely your import-js npm installation is not succeed. You can test by running:
#+begin_src sh :tangle no
importjsd start
#+end_src
If it succeed it will return this
#+RESULTS:
: ImportJS (v4.0.2) DAEMON active. Logs will go to: /tmp/importjs.log

If not it will throw an error, the one I got is about it cannot find node_sqlite3 module.
This case is come from =node-pre-gyp= cannot find the a pre-compiled binary in the first place.
Then it uses `node-gyp` to build the extension but it failed without messages you anything.
