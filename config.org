#+TITLE:    Doom Emacs configuration
#+author:   Nopanun Laochunhanun
#+DATE:     Fri Dec 10 15:38:47 2021
#+PROPERTY: header-args :results silent
#+SINCE:    v3.0.0-alpha
#+STARTUP:  content

* Table of Contents :TOC_3:noexport:
- [[#personalization][Personalization]]
  - [[#personal-information][Personal Information]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
  - [[#fonts][Fonts]]
  - [[#dashboard-quick-actions][Dashboard Quick Actions]]
  - [[#keyboard-shortcuts][Keyboard Shortcuts]]
  - [[#load-key-chain-environment-variables][Load Key-chain Environment Variables]]
  - [[#vterm][vterm]]
- [[#completioncorfu][Completion/Corfu]]
  - [[#source_code][Source_code]]
- [[#ui][UI]]
  - [[#deft][Deft]]
    - [[#configuration][Configuration]]
  - [[#window-navigation][Window Navigation]]
- [[#editor][Editor]]
  - [[#format][Format]]
    - [[#disabling-the-lsp-formatter][Disabling the LSP formatter]]
- [[#tools][Tools]]
  - [[#arrayify][Arrayify]]
  - [[#brief][Brief]]
    - [[#description][Description]]
    - [[#source-code][Source Code]]
  - [[#fzf][fzf]]
    - [[#description-1][Description]]
    - [[#source-code-1][Source Code]]
- [[#org-mode][Org-Mode]]
  - [[#configuration-1][Configuration]]
  - [[#org-capture-from-web-browser][Org Capture from Web browser]]
- [[#programming-language][Programming Language]]
  - [[#clojure][Clojure]]
  - [[#javascript][JavaScript]]
    - [[#description-2][Description]]
    - [[#new-features][New features]]
    - [[#prerequisites-for][Prerequisites for]]
    - [[#troubleshooting][Troubleshooting]]
  - [[#tailwind-lsp][Tailwind LSP]]
- [[#email--accounts][Email & Accounts]]
  - [[#how-to-use-contexts][How to use contexts]]
- [[#app][App]]
  - [[#telega---full-featured-unofficial-client-for-telegram-platform-for-gnu-emacs][Telega - full featured unofficial client for Telegram platform for GNU Emacs.]]
    - [[#installation][Installation]]
  - [[#edit-server---server-that-responds-to-edit-requests-from-chrome][Edit-Server - server that responds to edit requests from Chrome]]
    - [[#installation-1][Installation]]
- [[#local-configures][Local Configures]]
  - [[#directory-local-variables][Directory Local Variables]]
  - [[#safe-local-variables][safe-local-variables]]
  - [[#marking-the-root-of-a-project][Marking the root of a project]]

* Personalization
** Personal Information
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; For e.g. GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Nopanun Laochunhanun"
      user-mail-address "nopanun@pm.me")
#+end_src
** Themes
Set your light and dark theme here

#+begin_src emacs-lisp
(setq light 'doom-acario-light)
(setq dark 'doom-ayu-mirage)
#+end_src

Choose your mode

#+begin_src emacs-lisp
(setq doom-theme light)            ; default in Light mode
#+end_src

Or automatic (if it's not desired just add ~:tangle no~ to disable tangling)

#+begin_src emacs-lisp
(defun synchronize-theme ()
  (setq hour                          ; current hour
      (string-to-number
          (substring (current-time-string) 11 13)))
  (if (member hour (number-sequence 6 17)) ; Check if daytime's period
      (setq now light)                     ; true: Light
      (setq now dark))                     ; else: Dark
  (if (equal now doom-theme)          ; if now is Light
      nil                             ; do nothing
    (progn                            ; else
      (setq doom-theme now)           ; set to Dark
      (doom/reload-theme))))          ; and reload

(run-with-timer 0 3600 'synchronize-theme) ; check for every hour
#+end_src

** Modeline
I want to use [[https://github.com/TeMPOraL/nyan-mode][Nyan Mode]] with doom-modeline and I want to add =+nyan= flag to the modeline module, what I need to do is to hack the ~ui/modeline/packages.el~ file locates in .emacs.d/modules directory to add the nyan-mode package, add +nyan.el for config file and add some code into the module. (I've done this in my doom-emacs fork, and I'm attempting to introduce it to upstream soon)

** Fonts
+ [[https://input.djr.com/download/][Input: Fonts for Code — Download]] Free for private use
+ [[https://bboxtype.com/typefaces/FiraGO/][FiraGO]] Global Language Extension of the Open Font Family Fira Sans
Arabic · Devanagari · Georgian · Hebrew · Thai
+ [[https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode][FiraCode NF]] free monospaced font with programming ligatures Nerd Font

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "Noto Serif" :size 13)
      doom-unicode-font (font-spec :family "DejaVu Sans Mono")
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 19))
#+end_src
** Dashboard Quick Actions
The config idea is come from Tecosaur's Emacs configuration.
#+begin_quote
When using the dashboard, there are often a small number of actions I will
take. As the dashboard is it’s own major mode, there is no need to suffer
the tyranny of unnecessary keystrokes — we can simply bind common actions to a single key!
#+end_quote
#+begin_src emacs-lisp
(map! :map +doom-dashboard-mode-map
      :ne "l" #'doom/quickload-session
      :ne "a" #'org-agenda
      :ne "f" #'find-file
      :ne "r" #'consult-recent-file
      :ne "p" #'projectile-switch-project
      :ne "P" #'doom/open-private-config
      :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
      :ne "." (cmd! (doom-project-find-file "~/.config/")) ; . for dotfiles
      :ne "b" #'+vertico/switch-workspace-buffer
      :ne "B" #'consult-buffer
      :ne "q" #'save-buffers-kill-terminal
      :ne "h" #'doom/help
      :ne "v" #'+vterm/here
      :ne "t" #'telega
      :ne "T" #'=twitter
      :ne "m" #'=mu4e
      :ne "n" #'+default/find-in-notes
      :ne "d" #'+workspace/delete)
#+end_src

** Keyboard Shortcuts
#+begin_quote
Wow, I wish I knew these things before
#+end_quote

#+begin_src emacs-lisp
(map! :n  "g+"    #'evil-numbers/inc-at-pt
      :v  "g+"    #'evil-numbers/inc-at-pt-incremental
      :nv "g="    #'er/expand-region
      :gi "C-+"   #'er/expand-region
      :n  "C-0"   #'doom/reset-font-size
      :n  "C-+"   #'text-scale-increase
      :n  "M-C-+" #'doom/increase-font-size
      (:when (featurep! :tools eval)
       :vi "C-="   #'+eval:region
       :vi "M-C-=" #'+eval:replace-region)
      (:when (featurep! :tools fzf)
       :map search-map
       "SPC" #'fzf-projectile))
#+end_src
** Load Key-chain Environment Variables
[[https://github.com/tarsius/keychain-environment][tarsius/keychain-environment: Loads keychain environment variables into emacs]]
Captured On: [2021-11-12 Fri 23:05]

#+begin_src emacs-lisp
(use-package keychain-environment
  :init (keychain-refresh-environment)
  :config (map! :map help-map
                "rk" #'keychain-refresh-environment))
#+end_src
** vterm
In Vterm I prefer =ESC= to be a ~vterm--self-insert~
#+begin_src emacs-lisp
(after! vterm (evil-collection-vterm-toggle-send-escape))
#+end_src
* Completion/Corfu :completion:
** Source_code
+ corfu/
  + autoload/
    #+name: extra.el
    #+begin_src emacs-lisp :tangle modules/completion/corfu/autoload/extra.el :mkdirp yes
;;; completion/corfu/autoload/extra.el -*- lexical-binding: t; -*-

;;;###autoload
(defun +corfu-complete-file-at-point ()
  "Complete a file path from scratch at point"
  (interactive)
  (completion-in-region (point) (point) #'read-file-name-internal))

;;;###autoload
(defun +corfu-files ()
  "Complete using files source"
  (interactive)
  (let ((completion-at-point-functions 
         (list #'+file-completion-at-point-function)))
    (completion-at-point)))

;;;###autoload
(defun +corfu-dabbrev ()
  "Complete using dabbrev source"
  (interactive)
  (let ((completion-at-point-functions 
         (list #'+dabbrev-completion-at-point-function)))
    (completion-at-point)))

;;;###autoload
(defun +corfu-ispell ()
  "Complete using ispell source.

    See `ispell-lookup-words' for more info"
  (interactive)
  (let ((completion-at-point-functions 
         (list #'+ispell-completion-at-point-function)))
    (completion-at-point)))

;;;###autoload
(defun +corfu-dict ()
  "Complete using dict source.

    See `+dict--words' for extra words, 
    and `+dict-file' for a wordslist source"
  (interactive)
  (let ((completion-at-point-functions 
         (list #'+dict-completion-at-point-function)))
    (completion-at-point)))
    #+end_src
    #+name: minad-capf.el
    #+begin_src emacs-lisp :tangle modules/completion/corfu/autoload/minad-capf.el
;;; completion/corfu/autoload/minad-capf.el -*- lexical-binding: t; -*-
;;; Daniel "minad" Mendler extra capfs
;;; Source : https://github.com/minad/corfu/issues/9#issuecomment-945090516

(require 'dabbrev)

;;;###autoload
(defun +file-completion-at-point-function ()
  "File name completion-at-point-function."
  (when-let (bounds (bounds-of-thing-at-point 'filename))
    (list (car bounds) (cdr bounds)
          'read-file-name-internal
          :exclusive 'no
          :annotation-function (lambda (_) " (File)"))))

;;;###autoload
(defun +dabbrev-completion-at-point-function ()
  (let ((dabbrev-check-all-buffers nil)
        (dabbrev-check-other-buffers nil))
    (dabbrev--reset-global-variables))
  (let ((abbrev (ignore-errors (dabbrev--abbrev-at-point))))
    (when (and abbrev (not (string-match-p "[ \t]" abbrev)))
      (pcase ;; Interruptible scanning
          (while-no-input
            (let ((inhibit-message t)
                  (message-log-max nil))
              (or (dabbrev--find-all-expansions
                   abbrev (dabbrev--ignore-case-p abbrev))
                  t)))
        ('nil (keyboard-quit))
        ('t nil)
        (words
         ;; Ignore completions which are too short
         (let ((min-len (+ 4 (length abbrev))))
           (setq words (seq-remove (lambda (x) (< (length x) min-len)) words)))
         (when words
           (let ((beg (progn (search-backward abbrev) (point)))
                 (end (progn (search-forward abbrev) (point))))
             (unless (string-match-p "\n" (buffer-substring beg end))
               (list beg end words
                     :exclusive 'no
                     :annotation-function (lambda (_) " (Dabbrev)"))))))))))

(autoload 'ispell-lookup-words "ispell")

;;;###autoload
(defun +ispell-completion-at-point-function ()
  (when-let* ((bounds (bounds-of-thing-at-point 'word))
              (table (with-demoted-errors
                         (let ((message-log-max nil)
                               (inhibit-message t))
                           (ispell-lookup-words
                            (format "*%s*"
                                    (buffer-substring-no-properties 
                                     (car bounds) (cdr bounds))))))))
    (list (car bounds) (cdr bounds) table
          :exclusive 'no
          :annotation-function (lambda (_) " (Ispell)"))))

(defun +word-completion-at-point-function (words)
  (when-let (bounds (bounds-of-thing-at-point 'word))
    (list (car bounds) (cdr bounds) words
          :exclusive 'no
          :annotation-function (lambda (_) " (Words)"))))

(defvar +dict--words nil)
(defvar +dict-file "/etc/dictionaries-common/words")

;;;###autoload
(defun +dict-completion-at-point-function ()
  (+word-completion-at-point-function
   (or +dict--words
       (setq +dict--words
             (split-string (with-temp-buffer
                             (insert-file-contents-literally +dict-file)
                             (buffer-string))
                           "\n")))))
    #+end_src
  #+name: config.el
  #+begin_src emacs-lisp :tangle modules/completion/corfu/config.el
;;; completion/corfu/config.el -*- lexical-binding: t; -*-

;; Reset lsp-completion provider
(add-hook 'doom-init-modules-hook
          (lambda ()
            (after! lsp-mode
              (setq lsp-completion-provider :none))))

;; Pad before lsp modeline error info
(add-hook 'lsp-mode-hook
          (lambda ()
            (setf (caadr
                   (assq 'global-mode-string mode-line-misc-info))
                  " ")))

;; Set orderless filtering for LSP-mode completions
(add-hook 'lsp-completion-mode-hook
          (lambda ()
            (setf (alist-get 'lsp-capf completion-category-defaults) '((styles . (orderless))))))

;; Set bindings
(add-hook 'doom-init-modules-hook
          (lambda ()
            (map! :i "C-@" (cmds! (not (minibufferp)) #'corfu-complete)
                  :i "C-SPC" (cmds! (not (minibufferp)) #'corfu-complete)
                  (:prefix "C-x"
                   :i "C-k" #'cape-dict
                   :i "C-f" #'cape-file
                   :i "s" #'cape-ispell
                   :i "C-n" #'cape-keyword
                   :i "C-s" #'dabbrev-completion))))

;; Fallback cleanly to consult in TUI
(setq-default completion-in-region-function #'consult-completion-in-region)

(use-package! corfu
  :hook
  (doom-first-buffer . corfu-global-mode)
  :bind (:map corfu-map
         ("TAB" . corfu-next)
         ([tab] . corfu-next)
         ("S-TAB" . corfu-previous)
         ([backtab] . corfu-previous)))

(use-package! orderless
  :when (featurep! +orderless)
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

(use-package! kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package! cape
  :defer t
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword))

(setq completion-cycle-threshold 3)

;; Enable indentation+completion using the TAB key.
;; Completion is often bound to M-TAB.
(setq tab-always-indent 'complete)

;; Dirty hack to get c completion running
;; Discussion in https://github.com/minad/corfu/issues/34
(when (equal tab-always-indent 'complete)
  (map! :map c-mode-base-map
        :i [remap c-indent-line-or-region] #'completion-at-point))
  #+end_src
  #+name: packages.el
  #+begin_src emacs-lisp :tangle modules/completion/corfu/packages.el
;; -*- no-byte-compile: t; -*-
;;; completion/corfu/packages.el

(package! corfu)
(when (featurep! +orderless)
  (package! orderless))
(package! kind-icon)
(package! cape :recipe (:host github :repo "minad/cape" :branch "main"))
  #+end_src
  #+name: README.org
  #+begin_src org :tangle modules/completion/corfu/README.org
,#+TITLE:   completion/corfu
,#+DATE:    December 6, 2021
,#+SINCE:   v3.0.0-alpha
,#+STARTUP: inlineimages nofold

,* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
  - [[#module-flags][Module Flags]]
  - [[#plugins][Plugins]]
  - [[#hacks][Hacks]]
- [[#prerequisites][Prerequisites]]
- [[#features][Features]]
- [[#configuration][Configuration]]
- [[#troubleshooting][Troubleshooting]]

,* Description
[[https://github.com/minad/corfu][GitHub - minad/corfu: corfu.el - Completion Overlay Region FUnction]]
in the form of doom module by [[https://git.sr.ht/~gagbo/doom-config/tree/master/item/modules/completion/corfu][@Gerry_Agbobada]]. The primary packages are:

+ Corfu, which provides a completion overlay region function
+ Cape, which provides a bunch of Completion At Point Extensions
+ kind-icon, which provides an colorful icon/text prefix based on :company-kind

,** Maintainers
+ [[https://git.sr.ht/~gagbo/doom-config/tree/master/item/modules/completion/corfu][@Gerry_Agbobada]] (Author)
+ [[https://github.com/thaenalpha][@thaenalpha]]

,** Module Flags
+ =+orderless= filter through candidates those match regular expressions,
  which provides better filtering methods

,** Plugins
+ [[https://github.com/minad/corfu][corfu]]
+ [[https://github.com/minad/cape][cape]]
+ [[https://github.com/jdtsmith/kind-icon][kind-icon]]
+ [[https://github.com/oantolin/orderless][orderless]] (=+orderless=)

,** Hacks
# A list of internal modifications to included packages; omit if unneeded

,* Prerequisites
This module has no prerequisites.

,* Features
# An in-depth list of features, how to use them, and their dependencies.

,* Configuration
# How to configure this module, including common problems and how to address them.

,* Troubleshooting
# Common issues and their solution, or places to look for help.
#+end_src

* UI
** Deft
*** Configuration
To use deft, you first need to specify the directory in which your notes are stored:

#+begin_src emacs-lisp
;; deft
(setq deft-directory "~/notes")
#+end_src

The default note format is org-mode. You can change this by setting the value of
the variable ~deft-default-extension~. Replacing the value with ~"md"~, for example,
will change the default note format to Markdown:

#+begin_src emacs-lisp :tangle no
(setq deft-default-extension "md")
#+end_src

You may also want to alter the way titles and file names are automatically created by editing ~deft-use-filename-as-title~ and/or ~deft-use-filter-string-for-filename~.

Further customization options can be found here: https://github.com/jrblevin/deft#other-customizations

** Window Navigation
When =:ui hydra= is enabled, map keys to ~+hydra/window-nav/body~~ and ~+hydra/text-zoom/body~ to control text/window with single key commands.

#+begin_src emacs-lisp
(when (featurep! :ui hydra)
  (when (featurep! :completion vertico)
    (define-key!
      [remap +hydra/window-nav/idomenu] #'consult-imenu))
  (map! :desc "Interactive menu" 
        "<menu>" #'+hydra/window-nav/body
        :leader :desc "zoom"             
        "z"      #'+hydra/text-zoom/body))
#+end_src

* Editor
** Format
*** Disabling the LSP formatter
According to [[file:~/.emacs.d/modules/editor/format/README.org::*Disabling the LSP formatter][Disabling the LSP formatter]]
#+begin_quote
    If you are in a buffer with ~lsp-mode~ enabled and a server that
    supports =textDocument/formatting=, it will be used instead of
    =format-all='s formatter.
#+end_quote

To disable this behavior on ts and js modes in favor of prettier:
#+begin_src emacs-lisp
(setq-hook! '(js-mode
              js2-mode
              rjsx-mode
              typescript-mode
              typescript-tsx-mode) +format-with-lsp nil)
#+end_src

* Tools
** Arrayify
** Brief :tools:
*** Description
Module for brief help
**** Plugins
+ [[https://github.com/davep/cheat-sh.el][cheat-sh]]
+ [[https://github.com/thanhvg/emacs-howdoyou][howdoyou]]
+ [[https://github.com/kuanyui/tldr.el][tldr]]

*** Source Code
+ brief/
  #+name: config.el
  #+begin_src emacs-lisp :tangle modules/tools/brief/config.el :mkdirp yes
(use-package! howdoyou
  :commands (howdoyou-query aj/howdoyou-hydra/body)
  :config
  (set-popup-rule! "*How Do You" :vslot 3 :size 0.5 :side 'top 
    :select t :ttl nil :modeline t :autosave t :quit t)

  (add-hook 'howdoyou-mode-hook 
            (lambda () (doom-mark-buffer-as-real-h)
              (persp-add-buffer (current-buffer))
              (solaire-mode +1)
              (mkdir "/tmp/howdoyou" t)
              (setq-local org-src-fontify-natively nil)
              (setq-local buffer-file-name 
                          "/tmp/howdoyou/latest.org"))))

(map! :map search-map
      "M-a" #'howdoyou-query
      "M-s" #'cheat-sh
      "M-d" #'tldr)
  #+end_src
  #+name: packages.el
  [[file:packages.org::tools/brief][tools/brief]]

** fzf :tools:
*** Description
Command-line fuzzy finder written in Go

**** Plugins
+ [[https://github.com/bling/fzf.el][fzf]]

*** Source Code
+ fzf/
  #+name: config.el
  #+begin_src emacs-lisp :tangle modules/tools/fzf/config.el :mkdirp yes
  ;;; tools/fzf/config.el -*- lexical-binding: t; -*-

  (after! evil
    (evil-define-key 'insert fzf-mode-map (kbd "ESC") #'term-kill-subjob))

  (define-minor-mode fzf-mode
    "Minor mode for the FZF buffer"
    :init-value nil
    :lighter " FZF"
    :keymap '(("C-c" . term-kill-subjob)))

  (defadvice! doom-fzf--override-start-args-a (original-fn &rest args)
    "Set the FZF minor mode with the fzf buffer."
    :around #'fzf/start
    (message "called with args %S" args)
    (apply original-fn args)

    ;; set the FZF buffer to fzf-mode so we can hook ctrl+c
    (set-buffer "*fzf*")
    (fzf-mode))

  (defvar fzf/args
    "-x --print-query -m --tiebreak=index --expect=ctrl-v,ctrl-x,ctrl-t")

  (use-package! fzf
    :commands (fzf fzf-projectile fzf-hg fzf-git fzf-git-files fzf-directory
                   fzf-git-grep))
  #+end_src
  #+name: packages.el
  #+begin_src emacs-lisp :tangle modules/tools/fzf/packages.el
  ;; -*- no-byte-compile: t; -*-
  ;;; tools/fzf/packages.el

  (package! fzf)
  #+end_src

* Org-Mode
** Configuration

Put any basic configuration here

#+begin_src emacs-lisp
(setq org-clock-sound "/mnt/c/Windows/Media/Alarm06.wav")
#+end_src

** Org Capture from Web browser

To let this configuration works, =Org Capture= browser's extension and
=org-protocol= handler is required.

If you're a WSL user, you can run the one that matches how your emacs launches:
#+begin_src sh :tangle no
powershell.exe ./org-protocol.reg
#+end_src
#+begin_src sh :tangle no
powershell.exe ./org-protocol-omz-emacs-plugin.reg
#+end_src

#+begin_src conf :tangle org-protocol.reg :tangle-mode (identity #o777)
REGEDIT4

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:Org Protocol"
"URL Protocol"=""
[HKEY_CLASSES_ROOT\org-protocol\shell]
[HKEY_CLASSES_ROOT\org-protocol\shell\open]
[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"C:\\Windows\\System32\\wsl.exe\" emacsclient \"%1\""
#+end_src
#+begin_src conf :tangle org-protocol-omz-emacs-plugin.reg :tangle-mode (identity #o777)
REGEDIT4

[HKEY_CLASSES_ROOT\org-protocol]
@="URL:Org Protocol"
"URL Protocol"=""
[HKEY_CLASSES_ROOT\org-protocol\shell]
[HKEY_CLASSES_ROOT\org-protocol\shell\open]
[HKEY_CLASSES_ROOT\org-protocol\shell\open\command]
@="\"C:\\Windows\\System32\\wsl.exe\" zsh -l ~/.oh-my-zsh/plugins/emacs/emacsclient.sh --no-wait \"%1\""
#+end_src

Then set keys for =Selected Template= and =Unselected Template= in extension
options to P&L to match with org-capture-templates for =org-protocol= set below.

#+name: Capture templates
#+begin_src emacs-lisp
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c)))
           string-to-transform)))

(require 'org-protocol)
(setq org-capture-templates
  (append org-capture-templates
    `(("P" "Protocol" entry
       (file+headline +org-capture-notes-file "Inbox")
       "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
      ("L" "Protocol Link" entry
       (file+headline +org-capture-notes-file "Inbox")
       "* %? [[%:link][%(transform-square-brackets-to-round-ones
                        \"%:description\")]] \nCaptured On: %U")
      ("l" "Web site" entry
       (file+headline (lambda () (concat org-directory "/webnotes.org")) "Inbox")
       "* %a\nCaptured On: %U\nWebsite: %l\n\n%i\n%?")
      ("m" "meetup" entry (file "~/org/caldav.org")
       "* %?%:description \n%i\n%l")
      ("w" "Web site" entry
       (file+olp "~/org/inbox.org" "Web")
       "* %c :website:\n%U %?%:initial"))))
#+end_src
#+name: Org-roam roam-ref templates
#+begin_src emacs-lisp
(setq  org-roam-capture-ref-templates
       '(("l" "Web site" plain (function org-roam-capture--get-point)
          "${body}\n%?"
          :file-name "%<%Y%m%d>-${slug}"
          :head "#+title: ${title}\n#+CREATED: %U\n#+roam_key: ${ref}\n\n"
          :unnarrowed t)))
#+end_src

* Programming Language
This section adds packages and configuration on top of Doom Lang modules

** Clojure
turn on paredit-mode (minor) after Clojure-mode was loaded (major)
#+begin_src emacs-lisp
(when (featurep! :lang clojure)
   (add-hook 'clojure-mode-hook 'paredit-mode))
#+end_src

** JavaScript
*** Description
My Doom Emacs private JavaScript module with Add-on plugins.
This was made by doing relative symbolic links to Doom built-in JavaScript Module except for packages.el.

**** Plugins
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; lang/javascript/packages.el
#+end_src
[[https://github.com/defunkt/coffee-mode][coffee-mode]]
[[https://github.com/mooz/js2-mode][js2-mode]]
[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
[[https://github.com/emacs-typescript/typescript.el][typescript-mode]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Major modes
(package! rjsx-mode :built-in 'prefer)
(package! typescript-mode :built-in 'prefer)
#+end_src
[[https://github.com/magnars/js2-refactor.el][js2-refactor]]
[[https://github.com/mojochao/npm-mode][npm-mode]]
+ [[https://github.com/rajasegar/pnpm-mode][pnpm-mode]]
+ [[https://github.com/Galooshi/emacs-import-js][import-js]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Tools
(package! js2-refactor :built-in 'prefer)
(package! npm-mode :built-in 'prefer)
(package! add-node-modules-path :built-in 'prefer)
(package! pnpm-mode)
(package! import-js)
(package! yarn
 :recipe (:host github :repo "thaenalpha/yarn.el"))
#+end_src
[[https://github.com/abicky/nodejs-repl.el][nodejs-repl]]
[[https://github.com/skeeto/skewer-mode][skewer-mode]]
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Eval
(package! nodejs-repl :built-in 'prefer)
(package! skewer-mode :built-in 'prefer)
#+end_src
[[https://github.com/ananthakumaran/tide][tide]]
[[https://github.com/NicolasPetton/xref-js2][xref-js2]]*
#+begin_src emacs-lisp :tangle modules/lang/javascript/packages.el
;; Programming environment
(package! tide :built-in 'prefer)
(when (featurep! :tools lookup)
  (package! xref-js2 :built-in 'prefer))
#+end_src

**** Appendix
| symbolic    | description   |
|-------------+---------------|
| =PACKAGE=   | Doom original |
| =+ PACKAGE= | Add-on plugin |

*** New features
+ automatically import dependencies in your JavaScript project.
+ Minor mode for working with pnpm projects
+ Minor mode for working with yarn projects

*** Prerequisites for
**** This module
You must open this doc in Emacs and run this code block by press enter:
(this works only if your Emacs and Doom configs path are defaults)
#+begin_src sh :tangle no
ln -s ../../../../.emacs.d/modules/lang/javascript/README.org modules/lang/javascript/README.org
ln -s ../../../../.emacs.d/modules/lang/javascript/autoload.el modules/lang/javascript/autoload.el
ln -s ../../../../.emacs.d/modules/lang/javascript/config.el modules/lang/javascript/config.el
ln -s ../../../../.emacs.d/modules/lang/javascript/doctor.el modules/lang/javascript/doctor.el
#+end_src
**** Running ImportJS in Emacs
1. Install the importjs binary:
   #+begin_src sh :dir /sudo:: :tangle no
   sudo npm install import-js -g
   #+end_src
2. Configure Import-Js
3. Install Watchman as an performance booster to import-js daemon
   - macOS or Linux
    #+begin_src sh :tangle no
     brew update && brew install watchman
    #+end_src

:nv "g <f4>" #'import-js-goto)*** Configuration
These configs live inside the =+config.el= file and some are located in =autoload/*.el= files.

As the =+config.el= is an [[file:~/.emacs.d/docs/getting_started.org::*Additional files][Additional file]],
This can be loaded with the ~load!~ macro, which will load an elisp file
relative to the file it's used from which is =init.el= in our case.

#+BEGIN_SRC emacs-lisp :tangle modules/lang/javascript/init.el
;; Omitting the file extension allows Emacs to load the byte-compiled version,
;; if it is available:
(load! "+config")
#+END_SRC
**** import-js
1. Run the import-js daemon
   * =M-x=  ~run-import-js~
   * The daemon will use watchman if installed to improve performance
   * Configure ~run-import-js~ to run on open a JavaScript oriented buffer:

#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;; lang/javascript/+config.el -*- lexical-binding: t; -*-
;;
;;; Tools

(add-hook! '(typescript-mode-local-vars-hook
             typescript-tsx-mode-local-vars-hook
             web-mode-local-vars-hook
             rjsx-mode-local-vars-hook)
  (defun import-js-setup ()
    "Start `import-js' in the current buffer."
    (let ((buffer-file-name (buffer-file-name (buffer-base-buffer))))
      (when (derived-mode-p 'js-mode 'typescript-mode 'typescript-tsx-mode)
        (if (null buffer-file-name)
            ;; necessary because `tide-setup' and `lsp' will error if not a
            ;; file-visiting buffer
            (add-hook 'after-save-hook #'import-js-setup
                      nil 'local)
          (if (executable-find "node")
              (and (require 'import-js nil t)
                   (progn (import-js-mode 1) (run-import-js) import-js-mode))
            (ignore
             (doom-log
              "Couldn't start the import-js daemon because 'node' is missing")))
          (remove-hook 'after-save-hook #'import-js-setup
                       'local))))))
#+end_src

2. Import a file!
   * You can use something like =M-x=  ~import-js-import~ with your cursor over the desired module
   * It will be helpful to bind ~import-js-import~ to an easy-to-use binding, such as:

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el :mkdirp yes
;;; lang/javascript/autoload/import-js.el -*- lexical-binding: t; -*-

(defvar import-js-map (make-sparse-keymap) "Keymap for `import-js'.")
(map! (:map import-js-map
       "C-c i" (define-prefix-command #'import-js)
       (:localleader "i" #'import-js)
#+end_src
3. Go directly to a file
   * The ImportJS goto interface allows us to jump to a package
   * =M-x=  ~import-js-goto~ will jump to the appropriate file found by ImportJS
   * This should also be bound to something useful

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el
       :nv "g <f4>" #'import-js-goto)
   ;; and the rest.
      (:map import-js
       "f" #'import-js-fix
       "g" #'import-js-goto
       "i" #'import-js-import
       "k" #'kill-import-js
       "r" #'run-import-js))
#+end_src
4. Fix your imports
  * Optionally, you can configure ImportJS to fix your imports for you, adding unknown variables and removing unused imports. ImportJS uses eslint to find these variables.
  * `eslint` must be in your PATH.
  * eslint plugins must be installed for that specific version of eslint (if
    eslint is a global eslint, you may need to install the plugins globally)
  * Run with =M-x=  ~import-js-fix~
  * Configure ~import-js-fix~ to run on save:

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/import-js.el
;;;###autoload
(define-minor-mode import-js-mode
  "Minor mode for automatically Import Javascript dependencies."
  :lighter " importjs"
  :keymap import-js-map
  (if import-js-mode
       (add-hook 'after-save-hook #'import-js-fix nil t)
   (remove-hook 'after-save-hook #'import-js-fix t)))

;; Hooks

;;;###autoload
(defun +javascript-cleanup-import-js-processes-h ()
  "Clean up dangling import-js daemon process if there are no more buffers with `import-js-mode' active."
  (when import-js-mode
    (unless (cl-loop for buf in (delq (current-buffer) (buffer-list))
                     if (buffer-local-value 'import-js-mode buf)
                     return buf)
      (kill-import-js))))
#+end_src
5. Cleanup importjsd process when no import-js buffers are left

#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package import-js
(use-package! import-js
    :config
    (add-hook! 'import-js-mode-hook
      (add-hook 'kill-buffer-hook #'+javascript-cleanup-import-js-processes-h
                nil 'local)))
#+end_src

**** pnpm-mode
#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package pnpm-mode
(use-package! pnpm-mode
   :config
   (map! :localleader
         :map pnpm-mode-keymap
          "n" pnpm-mode-command-keymap)
   ;; Disable npm-mode when enabling pnpm
   (add-hook 'pnpm-mode-hook
      (defun turn-off-npm-mode () (npm-mode -1))))
#+end_src
***** Project Activation
By adding ~.dir-locals.el~ file on the root directory of a project containing:
#+begin_src emacs-lisp :tangle no
((nil . ((mode . pnpm))))
#+end_src
****** For more detail: [[https://github.com/rajasegar/pnpm-mode#project-activation][rajasegar/pnpm-mode: An Emacs minor mode for working with NPM projects.]]
Captured On: [2021-10-21 Thu 15:08]

**** yarn
***** keyboard bindings

This package doesn't provide keyboard bindings, so, I have to add them to my own module scripts.

#+begin_src emacs-lisp :tangle modules/lang/javascript/autoload/yarn.el :mkdirp yes
;;; lang/javascript/autoload/yarn.el -*- lexical-binding: t; -*-

(defvar yarn--project-file-name "package.json"
  "The name of yarn project files.")

(defun yarn--project-file ()
  "Return path to the project file, or nil.
If project file exists in the current working directory, or a
parent directory recursively, return its path.  Otherwise, return
nil."
  (let ((dir (locate-dominating-file default-directory yarn--project-file-name)))
    (unless dir
      (error (concat "Error: cannot find " yarn--project-file-name)))
    (concat dir yarn--project-file-name)))

(defun yarn--get-project-property (prop)
  "Get the given PROP from the current project file."
  (let* ((project-file (yarn--project-file))
         (json-object-type 'hash-table)
         (json-contents (with-temp-buffer
                          (insert-file-contents project-file)
                          (buffer-string)))
         (json-hash (json-read-from-string json-contents))
         (value (gethash prop json-hash))
         (commands (list)))
    (cond ((hash-table-p value)
           (maphash (lambda (key value)
                      (setq commands
                            (append commands
                                    (list (list key (format "%s %s" "yarn" key))))))
                    value)
           commands)
          (t value))))

(defun yarn--exec-process (cmd &optional comint)
  "Execute a process running CMD.
Optional argument COMINT ."
  (let ((compilation-buffer-name-function
         (lambda (mode)
           (format "*yarn:%s - %s*"
                   (yarn--get-project-property "name") cmd))))
    (message (concat "Running " cmd))
    (compile cmd comint)))

(defun yarn-list ()
  "Run the 'yarn list' command."
  (interactive)
  (yarn--exec-process "yarn list --depth=0"))

(defun yarn-visit-project-file ()
  "Visit the project file."
  (interactive)
  (find-file (yarn--project-file)))

(defvar yarn-map (make-sparse-keymap) "Keymap for the `Yarn' package manager.")
(map! (:map yarn-map
       "C-c n" (define-prefix-command #'yarn)
       (:localleader "n" #'yarn))
      (:map yarn
       "i" #'yarn-install
       "n" #'yarn-init
       "a" #'yarn-add
       "d" #'yarn-add-dev
       "r" #'yarn-run
       "p" #'yarn-publish
       "t" #'yarn-test
       "v" #'yarn-visit-project-file
       "V" #'yarn-version
       "g" #'yarn-upgrade
       "u" #'yarn-update
       "U" #'yarn-remove
       "l" #'yarn-list))

;;;###autoload
(define-minor-mode yarn-mode
  "Minor mode for working with yarn projects."
  :lighter " yarn"
  :keymap yarn-map
  :group 'yarn)

;;;###autoload
(define-globalized-minor-mode yarn-global-mode
  yarn-mode
  yarn-mode)
#+end_src
#+begin_src emacs-lisp :tangle modules/lang/javascript/+config.el
;;;###package yarn
(use-package! yarn
   :config
   ;; Disable npm-mode when enabling yarn-mode
   (add-hook 'yarn-mode-hook #'turn-off-npm-mode))
#+end_src

***** Project Activation
By adding ~.dir-locals.el~ file on the root directory of a project containing:
#+begin_src emacs-lisp :tangle no
((nil . ((mode . yarn))))
#+end_src
****** For more detail: [[https://github.com/rajasegar/pnpm-mode#project-activation][rajasegar/pnpm-mode: An Emacs minor mode for working with NPM projects.]]
Captured On: [2021-10-21 Thu 15:08]

*** Troubleshooting
**** TODO import-js-daemon not running
After you M-x ~run-import-js~ command if there is an error about void symbol definition.
This likely your import-js npm installation is not succeed. You can test by running:
#+begin_src sh :tangle no
importjsd start
#+end_src
If it succeed it will return this
#+RESULTS:
: ImportJS (v4.0.2) DAEMON active. Logs will go to: /tmp/importjs.log

If not it will throw an error, the one I got is about it cannot find node_sqlite3 module.
This case is come from =node-pre-gyp= cannot find the a pre-compiled binary in the first place.
Then it uses `node-gyp` to build the extension but it failed without messages you anything.

** Tailwind LSP :tools:css:lsp:
#+begin_comment

    This sub-tree was taken from Jay Zawrotny's Doom Configures
    [[https://github.com/eccentric-j/dotfiles/blob/master/doom.d/config.org][dotfiles/config.org at master · eccentric-j/dotfiles · GitHub]]
#+end_comment

Provide tailwind class name completions as an extra LSP package.

Install the lsp-tailwindcss emacs package: [[file:packages.org::*Packages in Use][Packages in Use]]

Set add-on mode. This ensures both tailwind-lsp and the js or ts lsp servers
run in parallel. Set ~lsp-tailwindcss-add-on-mode~ before the package loads.

#+begin_src emacs-lisp
(use-package! lsp-tailwindcss
  :init
  (setq! lsp-tailwindcss-add-on-mode t)
  :custom
  (lsp-tailwindcss-major-modes '(rjsx-mode web-mode html-mode css-mode typescript-mode typescript-tsx-mode)))
#+end_src

Lastly associate various template language files with html so that
lsp-tailwindcss runs when editing .liquid files for example.

#+begin_src emacs-lisp
(add-to-list 'lsp-language-id-configuration '(".*\\.liquid" . "html"))
#+end_src

Make sure to add the =+lsp= flag to the =:lang web= module in [[./init.el][init.el]]!


* Email & Accounts

This is my personal configuration. I have multiple email addresses set like these

#+BEGIN_SRC emacs-lisp
;; Each path is relative to the path of the maildir you passed to mu
(set-email-account! "boliden@gmail.com"
  '((mu4e-sent-folder       . "/boliden@gmail.com/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/boliden@gmail.com/[Gmail]/Drafts")
    (mu4e-spam-folder       . "/boliden@gmail.com/[Gmail]/Spam")
    (mu4e-trash-folder      . "/boliden@gmail.com/[Gmail]/Trash")
    (mu4e-refile-folder     . "/boliden@gmail.com/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "boliden@gmail.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "thaenalpha@gmail.com"
  '((mu4e-sent-folder       . "/thaenalpha@gmail.com/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/thaenalpha@gmail.com/[Gmail]/Drafts")
    (mu4e-spam-folder       . "/thaenalpha@gmail.com/[Gmail]/Spam")
    (mu4e-trash-folder      . "/thaenalpha@gmail.com/[Gmail]/Trash")
    (mu4e-refile-folder     . "/thaenalpha@gmail.com/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "thaenalpha@gmail.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "bolidenx@hotmail.com"
  '((mu4e-sent-folder       . "/bolidenx@hotmail.com/Sent")
    (mu4e-drafts-folder     . "/bolidenx@hotmail.com/Drafts")
    (mu4e-spam-folder       . "/bolidenx@hotmail.com/Junk")
    (mu4e-trash-folder      . "/bolidenx@hotmail.com/Deleted")
    (mu4e-refile-folder     . "/bolidenx@hotmail.com/Archive")
    (smtpmail-smtp-user     . "bolidenx@hotmail.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "nopanun@live.com"
  '((mu4e-sent-folder       . "/nopanun@live.com/Sent")
    (mu4e-drafts-folder     . "/nopanun@live.com/Drafts")
    (mu4e-spam-folder       . "/nopanun@live.com/Junk")
    (mu4e-trash-folder      . "/nopanun@live.com/Deleted")
    (mu4e-refile-folder     . "/nopanun@live.com/Archive")
    (smtpmail-smtp-user     . "nopanun@live.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
(set-email-account! "tannarin26@yahoo.com"
  '((mu4e-sent-folder       . "/tannarin26@yahoo.com/Sent")
    (mu4e-drafts-folder     . "/tannarin26@yahoo.com/Draft")
    (mu4e-spam-folder       . "/tannarin26@yahoo.com/Bulk Mail")
    (mu4e-trash-folder      . "/tannarin26@yahoo.com/Trash")
    (mu4e-refile-folder     . "/tannarin26@yahoo.com/Archive")
    (smtpmail-smtp-user     . "tannarin26@yahoo.com")
    (mu4e-compose-signature . "---\nNopanun Laochunhanun"))
  t)
#+END_SRC

Change context behavior when opening mu4e and composing email with:
~mu4e-context-policy~ and ~mu4e-compose-context-policy~

#+begin_src emacs-lisp
(setq mu4e-context-policy 'ask-if-none
      mu4e-compose-context-policy 'always-ask)
#+end_src

** How to use contexts

Examples:

- Compose new mail in a context
- Archive a message in a context (show which folder it goes to)
- Reply to a message in a merged search

You can create bookmarks to show merged views of folders across accounts:

#+begin_src emacs-lisp
(after! mu4e
 (setq sendmail-program (executable-find "msmtp")
       send-mail-function #'smtpmail-send-it
       message-sendmail-f-is-evil t
       message-sendmail-extra-arguments '("--read-envelope-from")
       message-send-mail-function #'message-send-mail-with-sendmail
       mu4e-maildir-shortcuts '(("/thaenalpha@gmail.com/Job Applying".?j)))

 (defun add-mu4e-bookmark (bookmark)
   (add-to-list 'mu4e-bookmarks bookmark))

 (mapc 'add-mu4e-bookmark
   '(("m:/boliden@gmail.com/INBOX or m:/bolidenx@hotmail.com/Inbox or m:/nopanun@live.com/Inbox or m:/tannarin26@yahoo.com/Inbox or m:/thaenalpha@gmail.com/INBOX or m:/nopanun@live.com/IT Demands" "All Inboxes" ?i)
     ("m:/boliden@gmail.com/[Gmail]/Sent Mail or m:/bolidenx@hotmail.com/Sent m:/thaenalpha@gmail.com/[Gmail]/Sent Mail or m:/nopanun@live.com/Sent or m:/tannarin26@yahoo.com/Sent" "All Sent" ?s)
     ("m:/boliden@gmail.com/[Gmail]/Drafts or m:/bolidenx@hotmail.com/Drafts m:/thaenalpha@gmail.com/[Gmail]/Drafts or m:/nopanun@live.com/Drafts or m:/tannarin26@yahoo.com/Draft" "All Drafts" ?d)
     ("m:/boliden@gmail.com/[Gmail]/All Mail or m:/bolidenx@hotmail.com/Archive m:/thaenalpha@gmail.com/[Gmail]/All Mail or m:/nopanun@live.com/Archive or m:/tannarin26@yahoo.com/Archive" "All Archives" ?a)
     ("m:/boliden@gmail.com/[Gmail]/Spam or m:/bolidenx@hotmail.com/Junk or m:/thaenalpha@gmail.com/[Gmail]/Spam or m:/nopanun@live.com/Junk or m:/tannarin26@yahoo.com/Bulk Mail" "All Spams" ?p)
     ("m:/boliden@gmail.com/[Gmail]/Trash or m:/bolidenx@hotmail.com/Deleted or m:/thaenalpha@gmail.com/[Gmail]/Trash or m:/nopanun@live.com/Deleted or m:/tannarin26@yahoo.com/Trash" "All Trashes" ?t))))
#+end_src

This is your e-mail client to build!

* App
** Telega - full featured unofficial client for Telegram platform for GNU Emacs.
*** Installation
telega depends on the visual-fill-column and rainbow-identifiers packages.
This dependency automatically installs if you install telega from MELPA or
GNU Guix. Otherwise, you will need to install these packages by hand.

telega is built on top of the official library provided by Telegram TDLib.
Most distributions do not provide this package in their repositories, in
which case you will have to install it manually by following the instructions.

GNU Guix, however, does have both telega and TDLib packaged.
If you use GNU Guix you can skip directly to Installing from GNU Guix.

**** Dependencies
Look for all dependencies at [[https://zevlg.github.io/telega.el/][Telega Manual (v0.7.018)]]
***** GNU gperf (for building TDLib)
****** Guix users
#+begin_src sh :tangle no
  guix install gperf
#+end_src

**** Building TDLib

TDLib is the library for building Telegram clients. It requires a large amount of memory to be built.
Make sure you are using TDLib version greater or equal to 1.7.0.

On MacOS you can install a pre-built TDLib package using Homebrew from brew.sh. Just run:

$ brew install tdlib

On Linux, you will need to build TDLib from source.

To get the source:

#+begin_src sh :tangle no
  git clone https://github.com/tdlib/td.git
#+end_src

Move into the folder with $ cd ./td or wherever you checked out td.

Prepare a folder for building the library:

#+begin_src sh :tangle no
  cd ./td && mkdir build && cd build && cmake ../
#+end_src

Build the sources:

#+begin_src sh :tangle no
  cd ./td/build && make -jN # Change N first, read a description below.
#+end_src

With N number of cores that should be used for the compilation (the optimal value is the number of
physical cores on the machine).

Finally, to install the library system-wide:

#+begin_src sh :dir (concat "/sudo::/home/" user-login-name "/.doom.d") :tangle no
cd ./td/build && sudo make install
#+end_src

It will install headers to /usr/local/include and library itself into /usr/local/lib. If you have TDLib installed
in other location, don't forget to modify telega-server-libs-prefix before starting telega.

**** Installing telega from MELPA

+ ~install~ as a doom :app module (You need to add =telega= at :app in =init.el=)

#+begin_src emacs-lisp :tangle modules/app/telega/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/telega/packages.el

(package! telega :built-in 'prefer)
#+end_src

- ~uninstall~ by replace =:tangle= value in ~install~ block with =no= and just press enter at the block below:
  #+begin_src sh :tangle no
    rm -r modules/app/telega
  #+end_src

** Edit-Server - server that responds to edit requests from Chrome
*** Installation
**** Dependencies
***** Edit with Emacs Chrome/Firefox extension
[[https://github.com/stsquad/emacs_chrome][stsquad/emacs_chrome: A Chromium "clone" of It's All Text for spawni...]]

**** Installing edit-server from MELPA

+ ~install~ as a doom :app module (You need to add =edit-server= at :app in =init.el=)

#+begin_src emacs-lisp :tangle modules/app/edit-server/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/edit-server/packages.el

(package! edit-server :built-in 'prefer)
#+end_src

- ~uninstall~ by replace =:tangle= value in ~install~ block with =no= and just press enter at the block below:
  #+begin_src sh :tangle no
    rm -r modules/app/edit-server
  #+end_src

**** Configuration
#+begin_src emacs-lisp :tangle modules/app/edit-server/config.el
;;; app/edit-server/config.el -*- lexical-binding: t; -*-

(use-package! edit-server
  :defer t
  :commands edit-server-start
  :init (edit-server-start)
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x)))
  (setq edit-server-url-major-mode-alist
        '(("github\\.com" . markdown-mode))))
#+end_src

* Local Configures
** Directory Local Variables
=SPC p e= ~projectile-edit-dir-locals~
This command let you custom project variables in =.dir-locals.el=
For more information see (info "(emacs) Directory Variables")

#+begin_src emacs-lisp :tangle .dir-locals.el
((nil . ((projectile-project-name . "oh-my-system") ; Edit project name .doom.d
         (indent-tabs-mode . nil)
         (fill-column . 80)
         (sentence-end-double-space . t)
         (emacs-lisp-docstring-fill-column . 75)
         (project-vc-merge-submodules . nil)))
 (org-mode . ((flycheck-textlint-executable . "node_modules/.bin/textlint"))))
#+end_src

** safe-local-variables
Emacs treat some variable as a risky-local-variable and will request your
permission to apply these variables every time when accessing a file within a
directory that contains settings for these variable in =.dir-locals.el= file.
#+begin_src emacs-lisp
(put 'flycheck-textlint-executable 'safe-local-variable #'stringp)
(put 'quickrun-option-command 'safe-local-variable #'stringp)
#+end_src

** Marking the root of a project
~projectile-project-root-files-bottom-up~
A list of files considered marking the root of a project.

#+begin_src emacs-lisp :tangle no
(after! projectile
   (setq projectile-project-root-files-bottom-up
       (remove ".git" projectile-project-root-files-bottom-up)))
#+end_src

#+RESULTS:
| .projectile | .project |

#+Original Value:
| .projectile |  .git | .hg | .fslckout | _FOSSIL_ | .bzr | _darcs |
