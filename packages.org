#+TITLE:   packages
#+DATE:    Oct 6, 2021
#+SINCE:   v3.0.0-alpha
#+STARTUP: inlineimages nofold

* Packages inbox
#+begin_src emacs-lisp :tangle yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; Extend shr/eww with org features and analysis capability
(package! shrface)
(package! sql-indent)
(package! emacsql-mysql)
(package! emacs-with-nyxt
  :recipe (:host github :repo "ag91/emacs-with-nyxt"))
(package! nndiscourse)
(unless IS-MAC (package! cask))         ; in prefer of `Brew'
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
(package! minibuffer-header
  :recipe (:host github :repo "rougier/minibuffer-header"))
(package! path-headerline-mode)
#+end_src

* System administration
#+begin_src emacs-lisp :tangle yes
;;
;;; Tools

(package! dtache
  ;; Run shell cmds in sessions that are isolated from Emacs
  :recipe (:host gitlab :repo "niklaseklund/dtache"))
(unless IS-MAC
  (package! keychain-environment)
  (package! trashed))
#+end_src

* Personalization
#+begin_src emacs-lisp :tangle yes
;;
;;; UI
#+end_src

** Themes
#+begin_src emacs-lisp :tangle yes
;;; Themes
(package! aj-dark+-theme                ; vscode dark+ theme
  :recipe (:host github :repo "AloisJanicek/.doom.d-2nd"
           :files ("themes/*dark+*")))
(package! ahungry-theme)                ; Ahungry color theme for Emacs.
(package! almost-mono-themes)           ; almost monochromatic color themes
(package! agraul-doom-themes            ; doom-themes with alabaster & github
  :recipe (:host gitlab :repo "agraul/dotfiles"
           :files ("doom/themes/*.el")))
(package! quartz-theme
  ;; Dark Emacs theme inspired by Alabaster Dark & Jonathans Awesome Dark Theme
  :recipe (:host github :repo "fm0xb/quartz-theme.el"))
#+end_src

** Miscellaneous
#+begin_src emacs-lisp :tangle yes
;;; Miscellaneous
#+end_src


* Modules
Private or extra to the Doom modules
#+begin_src emacs-lisp :tangle yes
;;
;;; Modules
#+end_src

** App
*** Jira :jira:org:bug:tracker:
#+begin_src emacs-lisp :tangle modules/app/jira/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/jira/packages.el

(package! org-jira)
#+end_src
*** Leetcode :extension:tools:
#+begin_src emacs-lisp :tangle modules/app/leetcode/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; tools/leetcode/packages.el

(package! leetcode)
#+end_src
*** Pocket :pocket:
#+begin_src emacs-lisp :tangle modules/app/pocket/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/pocket/packages.el

(package! pocket-reader)
#+end_src
*** Reddit :reddit:browse:news:
#+begin_src emacs-lisp :tangle modules/app/reddit/packages.el
;; -*- no-byte-compile: t; -*-
;;; app/reddit/packages.el

(package! md4rd)
#+end_src
*** Slack :tools:
#+begin_src emacs-lisp :tangle modules/app/slack/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/slack/packages.el

(package! slack)
(package! alert)
#+end_src
*** Telega :telega:
#+begin_src emacs-lisp :tangle modules/app/telega/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; app/telega/packages.el

(package! telega)
  #+end_src

** Completion
*** Company
#+begin_src emacs-lisp :tangle yes
;;; :completion company +tabnine
(when (modulep! :completion company +tabnine)
  (package! company-tabnine
    :recipe (:host github :repo "tommyX12/company-tabnine")))
#+end_src

** Editor
*** evil
** Emacs
*** ctrlf :extension:
#+begin_src emacs-lisp :tangle modules/emacs/ctrlf/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; emacs/ctrlf/packages.el

(package! ctrlf)
#+end_src
*** dired :files:convenience:
*** info
#+begin_src emacs-lisp :tangle modules/emacs/info/packages.el  :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; emacs/info/packages.el

(package! info-colors)
#+end_src

** OS :os:
*** Windows Subsystem Linux :wsl:
#+begin_src emacs-lisp :tangle modules/os/wsl/packages.el
;; -*- no-byte-compile: t; -*-
;;; os/wsl/packages.el -*- lexical-binding: t; -*-

(let ((distro (doom-system-distro)))
  (when (or (eq 'ubuntu distro) (eq 'debian distro)) (package! debian-el)))
#+end_src

** Tools
*** Brief
#+begin_src emacs-lisp :tangle modules/tools/brief/packages.el
;; -*- no-byte-compile: t; -*-
;;; tools/brief/packages.el

(package! cheat-sh) ; tldr but more detail, weaker syntax highlight
(package! howdoyou
  :recipe (:host github :repo "thanhvg/emacs-howdoyou"))
(package! tldr)
#+end_src
*** kubernetes
#+begin_src emacs-lisp :tangle modules/tools/kubernetes/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; tools/kubernetes/packages.el

(package! kubernetes)
(package! kubedoc)
#+end_src
*** Lookup
+ =+devdocs=
 #+begin_src emacs-lisp :tangle yes
;;; :tools lookup +devdocs 
(when (modulep! :tools lookup +devdocs) (package! devdocs))
#+end_src
+ =+docsets=
 #+begin_src emacs-lisp :tangle yes
;;; :tools lookup +docsets
(when (and IS-MAC (modulep! :tools lookup +docsets))
  (package! dash-at-point))
 #+end_src
*** Magit
#+begin_src emacs-lisp :tangle yes
;;; :tools magit +forge
(when (and EMACS29+ (modulep! :tools magit +forge))
 (package! emacsql-sqlite-builtin
  :recipe (:host github :repo "tarsiiformes/emacsql"
           :branch "sqlite-backends")))
#+end_src

** Lang
*** Clojure
#+begin_src emacs-lisp :tangle yes
;;; :lang clojure
(when (modulep! :lang clojure) (package! clj-deps-new))
#+end_src
*** Org
#+begin_src emacs-lisp :tangle yes
;;; :lang org
(when (modulep! :lang org)
  (package! orca)                       ; Org Capture
  (package! org-roam-ui)                ; User Interface for Org-roam
  (package! org-ol-tree
    :recipe (:host github :repo "Townk/org-ol-tree"))
  (package! org-appear                  ; Auto-toggle Org elements
    :recipe (:host github :repo "awth13/org-appear"))
  (package! org-modern)                 ; Modern Org Mode
  (package! org-transclusion)           ; Transclude text content via links
  (package! doct :recipe (:host github :repo "progfolio/doct"))
  (when (modulep! :lang org +web)
    (package! org-web-tools))           ; Display and capture web content
  (package! org-yt :recipe (:host github :repo "thaenalpha/org-yt"))
  (package! org-edit-indirect           ; Edit anything, not just src blocks
    :recipe (:host github :repo "agzam/org-edit-indirect.el")))
#+end_src
*** Web
#+begin_src emacs-lisp :tangle yes
;;; :lang web +tailwind
(when (and (modulep! :tools lsp) (modulep! :lang web +tailwind))
  (package! lsp-tailwindcss
    :recipe (:host github :repo "merrickluo/lsp-tailwindcss")))
#+end_src

** UI
*** Fixmee :navigation:convenience:
#+begin_src emacs-lisp :tangle modules/ui/fixmee/packages.el
;; -*- no-byte-compile: t; -*-
;;; ui/fixmee/packages.el

(package! fixmee)
#+end_src
*** Discover
#+begin_src emacs-lisp :tangle modules/ui/discover/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; ui/discover/packages.el

(package! discover)
#+end_src

* Doom packages.el's Documentation
To install a package with Doom you must declare them here and run 'doom sync'
on the command line, then restart Emacs for the changes to take effect -- or
use 'M-x doom/reload'.


To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! some-package)
#+end_src

To install a package directly from a remote git repo, you must specify a
`:recipe'. You'll find documentation on what `:recipe' accepts here:
https://github.com/raxod502/straight.el#the-recipe-format
#+begin_src emacs-lisp :tangle no
(package! another-package
 :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':
#+begin_src emacs-lisp :tangle no
(package! this-package
 :recipe (:host github :repo "username/repo"
          :files ("some-file.el" "src/lisp/*.el")))
#+end_src

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which)
our package manager can't deal with; see raxod502/straight.el#279)
#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:branch "develop"))
#+end_src

Use `:pin' to specify a particular commit to install.
#+begin_src emacs-lisp :tangle no
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src


Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...
#+begin_src emacs-lisp :tangle no
(unpin! pinned-package)
#+end_src
...or multiple packages
#+begin_src emacs-lisp :tangle yes
(unpin! :app :checkers :completion :config :editor
        :emacs :email :input :lang :os :term :tools :ui)
#+end_src
...Or *all* packages (NOT RECOMMENDED); will likely break things)
#+begin_src emacs-lisp :tangle no
(unpin! t)
#+end_src
