#+TITLE:   packages
#+DATE:    Oct 6, 2021
#+SINCE:   v3.0.0-alpha
#+STARTUP: inlineimages nofold

* Packages in Use
#+begin_src emacs-lisp :tangle yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(unpin! t)                              ; Unpin packages

;;
;;; Completions
(when (featurep! :completion company +tabnine)
  (package! company-tabnine
    :recipe (:host github :repo "tommyX12/company-tabnine")))
;;
;;; Tools
(package! keychain-environment)
(when (and (featurep! :tools lsp) (featurep! :lang web +tailwind))
  (package! lsp-tailwindcss
    :recipe (:host github :repo "merrickluo/lsp-tailwindcss")))
(when (and (featurep! :editor evil +tree-sitter)
           (featurep! :tools tree-sitter))
  (package! evil-textobj-tree-sitter
    :recipe (:host github
             :repo "meain/evil-textobj-tree-sitter"
             :files (:defaults "queries"))))
(package! debian-el)
(package! dtache ; run shell cmds in sessions that are isolated from Emacs
  :recipe (:host gitlab :repo "niklaseklund/dtache"))
(package! fixmee)
(package! trashed)
;;
;;; Themes
(package! alabaster
  :recipe (:host github :repo "wandersoncferreira/alabaster-theme"))
(package! quartz
  :recipe (:host github :repo "fm0xb/quartz-theme.el"))
(package! moe-theme)
(package! gotham-theme)

;;; UI
(package! info-colors)
#+end_src
#+name: tools/brief
#+begin_src emacs-lisp :tangle modules/tools/brief/packages.el :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; tools/brief/packages.el

(package! cheat-sh) ; tldr but more detail, weaker syntax highlight
(package! howdoyou
  :recipe (:host github :repo "thanhvg/emacs-howdoyou"))
(package! tldr)
(package! devdocs)
;; (package! howdoi) Not working now, I almost fixed it, but I have mistaken lost it when I upgrade Doom. Due to I edit src in straight package repo and Doom enforcing to discard or stash changes before upgrade and then my changes were gone.
#+end_src

* Doom packages.el's Documentation
To install a package with Doom you must declare them here and run 'doom sync'
on the command line, then restart Emacs for the changes to take effect -- or
use 'M-x doom/reload'.


To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! some-package)
#+end_src

To install a package directly from a remote git repo, you must specify a
`:recipe'. You'll find documentation on what `:recipe' accepts here:
https://github.com/raxod502/straight.el#the-recipe-format
#+begin_src emacs-lisp :tangle no
(package! another-package
 :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':
#+begin_src emacs-lisp :tangle no
(package! this-package
 :recipe (:host github :repo "username/repo"
          :files ("some-file.el" "src/lisp/*.el")))
#+end_src

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which)
our package manager can't deal with; see raxod502/straight.el#279)
(package! builtin-package :recipe (:branch "develop"))

Use `:pin' to specify a particular commit to install.
#+begin_src emacs-lisp :tangle no
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src


Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...
#+begin_src emacs-lisp :tangle no
(unpin! pinned-package)
#+end_src
...or multiple packages
#+begin_src emacs-lisp :tangle no
(unpin! pinned-package another-pinned-package)
#+end_src
...Or *all* packages (NOT RECOMMENDED); will likely break things)
#+begin_src emacs-lisp :tangle no
(unpin! t)
#+end_src
